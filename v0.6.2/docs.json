{"CharlotteDunois\\Yasmin\\Client":{"name":"CharlotteDunois\\Yasmin\\Client","line":30,"short_desc":"The client. What else do you expect this to say?","long_desc":"","hint":null,"tags":{"property":[[[["\\React\\EventLoop\\LoopInterface",false]],"loop","The event loop."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelStorageInterface",false]],"channels","Holds all cached channels, mapped by ID."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\EmojiStorageInterface",false]],"emojis","Holds all emojis, mapped by ID (custom emojis) and\/or name (unicode emojis)."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildStorageInterface",false]],"guilds","Holds all guilds, mapped by ID."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\PresenceStorageInterface",false]],"presences","Holds all cached presences (latest ones), mapped by user ID."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\UserStorageInterface",false]],"users","Holds all cached users, mapped by ID."],[[["int",true]],"pings","The last 3 websocket pings of each shard."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"shards","Holds all shards, mapped by shard ID."],[[["\\CharlotteDunois\\Yasmin\\Models\\ClientUser",false],["null",false]],"user","User that the client is logged in as. The instance gets created when the client turns ready."]],"method":[["on(string","$event,","callable","$listener)","","","","","","","","","","","","","","","Attach","a","listener","to","an","event.","The","method","is","from","the","trait","-","only","for","documentation","purpose","here."],["once(string","$event,","callable","$listener)","","","","","","","","","","","","","Attach","a","listener","to","an","event,","for","exactly","once.","The","method","is","from","the","trait","-","only","for","documentation","purpose","here."],["removeListener(string","$event,","callable","$listener)","","","Remove","specified","listener","from","an","event.","The","method","is","from","the","trait","-","only","for","documentation","purpose","here."],["removeAllListeners($event","=","null)","","","","","","","","","","","","","","","","","","","Remove","all","listeners","from","an","event","(or","all","listeners)."]]},"namespace":"CharlotteDunois\\Yasmin","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Client.php","relative_file":"\/src\/Client.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Events\\EventEmitterInterface":"CharlotteDunois\\Events\\EventEmitterInterface","Serializable":"Serializable"},"traits":{"CharlotteDunois\\Events\\EventEmitterErrorTrait":"CharlotteDunois\\Events\\EventEmitterErrorTrait"},"source":null,"properties":{"channels":{"name":"channels","line":30,"short_desc":"Holds all cached channels, mapped by ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelStorageInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"emojis":{"name":"emojis","line":30,"short_desc":"Holds all emojis, mapped by ID (custom emojis) and\/or name (unicode emojis).","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\EmojiStorageInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guilds":{"name":"guilds","line":30,"short_desc":"Holds all guilds, mapped by ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildStorageInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"loop":{"name":"loop","line":30,"short_desc":"The event loop.","long_desc":null,"hint":[["\\React\\EventLoop\\LoopInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"pings":{"name":"pings","line":30,"short_desc":"The last 3 websocket pings of each shard.","long_desc":null,"hint":[["int",true]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"presences":{"name":"presences","line":30,"short_desc":"Holds all cached presences (latest ones), mapped by user ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\PresenceStorageInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"readyTimestamp":{"name":"readyTimestamp","line":127,"short_desc":"The UNIX timestamp of the last emitted ready event (or null if none yet).","long_desc":"","hint":[["int",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"default":{"nodeType":"Expr_ConstFetch","name":{"nodeType":"Name","parts":["null"],"attributes":{"startLine":127,"endLine":127,"namespacedName":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","null"],"attributes":{"startLine":127,"endLine":127}}}},"attributes":{"startLine":127,"endLine":127}},"errors":[],"source":null},"shards":{"name":"shards","line":30,"short_desc":"Holds all shards, mapped by shard ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"token":{"name":"token","line":133,"short_desc":"The token.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"default":null,"errors":[],"source":null},"user":{"name":"user","line":30,"short_desc":"User that the client is logged in as. The instance gets created when the client turns ready.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\ClientUser",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"users":{"name":"users","line":30,"short_desc":"Holds all cached users, mapped by ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\UserStorageInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__construct":{"name":"__construct","line":235,"short_desc":"What do you expect this to do? It makes a new Client instance. Available client options are as following (all are optional):","long_desc":"```\narray(\n  'disableClones' => bool|string[], (disables cloning of class instances (for perfomance), affects update events - bool: true - disables all cloning)\n  'disableEveryone' => bool, (disables the everyone and here mentions and replaces them with plaintext, defaults to true)\n  'fetchAllMembers' => bool, (fetches all guild members, this should be avoided - necessary members get automatically fetched)\n  'messageCache' => bool, (enables message cache, defaults to true)\n  'messageCacheLifetime' => int, (invalidates messages in the store older than the specified duration)\n  'messageSweepInterval' => int, (interval when the message cache gets invalidated (see messageCacheLifetime), defaults to messageCacheLifetime)\n  'presenceCache' => bool, (enables presence cache, defaults to true)\n  'minShardID' => int, (minimum shard ID to spawn - 0-indexed, if omitted, the client will determine the shards to spawn themself)\n  'maxShardID' => int, (maximum shard ID to spawn - 0-indexed, if omitted, the client will determine the shards to spawn themself)\n  'shardCount' => int, (shard count, if omitted, the client will determine the shards to spawn themself)\n  'userSweepInterval' => int, (interval when the user cache gets invalidated (users sharing no mutual guilds get removed), defaults to 600)\n  'http.ratelimitbucket.name' => string, (class name of the custom ratelimit bucket, has to implement the interface)\n  'http.restTimeOffset' => int|float, (specifies how many seconds should be waited after one REST request before the next REST request should be done)\n  'http.requestErrorDelay' => int, (specifies how many seconds should be waited after a HTTP 5XX error before queueing the request again, after two retries the time will be doubled, defaults to 30 - minimum 15)\n  'http.requestMaxRetries' => int, (specifies how many times the request should be retried on HTTP 5XX until we give up, defaults to 0 (never give up))\n  'ws.compression' => string, (Enables a specific one, defaults to zlib-stream, which is currently the only available compression)\n  'ws.encoding' => string, (use a specific websocket encoding, JSON or ETF (if suggested package installed), recommended is JSON for now)\n  'ws.disabledEvents' => string[], (disables specific websocket events (e.g. TYPING_START), only disable websocket events if you know what they do)\n  'ws.largeThreshold' => int, (50-250, members threshold after which guilds gets counted as large, defaults to 250)\n  'ws.presence' => array, (the presence to send on WS connect, see See Also section)\n  'ws.presenceUpdate.ignoreUnknownUsers' => bool, (whether we ignore presence updates of uncached users, defaults to false)\n)\n```","hint":null,"hint_desc":null,"tags":{"see":[["\\CharlotteDunois\\Yasmin\\ClientEvents"],["https:\/\/discordapp.com\/developers\/docs\/topics\/gateway#update-status"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\Exception",""],["\\RuntimeException",""],["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":235,"short_desc":"Any client options.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false},"loop":{"name":"loop","line":235,"short_desc":"You can pass an event loop to the class, or it will automatically create one (you still need to make it run yourself).","long_desc":null,"hint":[["\\React\\EventLoop\\LoopInterface",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["React","EventLoop","LoopInterface"],"attributes":{"startLine":235,"endLine":235}},"attributes":{"startLine":235,"endLine":235}},"default":"null","variadic":false,"is_by_ref":false}}},"addPeriodicTimer":{"name":"addPeriodicTimer","line":884,"short_desc":"Adds a \"client-dependant\" periodic timer. The timer gets automatically cancelled on destroy. The callback can only accept one argument, the client.","long_desc":"","hint":[["\\React\\EventLoop\\Timer\\Timer",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"interval":{"name":"interval","line":884,"short_desc":"","long_desc":null,"hint":[["float",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"callback":{"name":"callback","line":884,"short_desc":"","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false}}},"addTimer":{"name":"addTimer","line":868,"short_desc":"Adds a \"client-dependant\" timer. The timer gets automatically cancelled on destroy. The callback can only accept one argument, the client.","long_desc":"","hint":[["\\React\\EventLoop\\Timer\\Timer",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"timeout":{"name":"timeout","line":868,"short_desc":"","long_desc":null,"hint":[["float",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"callback":{"name":"callback","line":868,"short_desc":"","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false}}},"cancelTimer":{"name":"cancelTimer","line":898,"short_desc":"Cancels a timer.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"timer":{"name":"timer","line":898,"short_desc":"","long_desc":null,"hint":[["\\React\\EventLoop\\TimerInterface",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"cancelTimers":{"name":"cancelTimers","line":913,"short_desc":"Cancels all timers.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"createGuild":{"name":"createGuild","line":639,"short_desc":"Creates a new guild. Resolves with an instance of Guild. Options is as following, everything is optional unless specified:","long_desc":"```\narray(\n  'name' => string, (required)\n  'region' => \\CharlotteDunois\\Yasmin\\Models\\VoiceRegion|string, (required)\n  'icon' => string, (an URL, a filepath or data)\n  'verificationLevel' => int, (0-4)\n  'defaultMessageNotifications' => int, (0 or 1)\n  'explicitContentFilter' => int, (0-2)\n  'roles' => array, (an array of role arrays*)\n  'channels' => array (an array of channel arrays**)\n\n    * array( \/\/ role array\n    *   'name' => string, (required)\n    *   'permissions' => \\CharlotteDunois\\Yasmin\\Models\\Permissions|int,\n    *   'color' => int|string,\n    *   'hoist' => bool,\n    *   'mentionable' => bool\n    * )\n\n    ** array( \/\/ channel array\n    **   'name' => string, (required)\n    **   'type' => 'text'|'voice', (category is not supported by the API, defaults to 'text')\n    **   'bitrate' => int, (only for voice channels)\n    **   'userLimit' => int, (only for voice channels, 0 = unlimited)\n    **   'permissionOverwrites' => array, (an array of permission overwrite arrays***)\n    **   'nsfw' => bool (only for text channels)\n    ** )\n\n    *** array( \/\/ overwrite array, all required\n    ***   'id' => \\CharlotteDunois\\Yasmin\\Models\\User|string, (string = user ID or role name (of above role array!))\n    ***   'allow' => \\CharlotteDunois\\Yasmin\\Models\\Permissions|int,\n    ***   'deny' => \\CharlotteDunois\\Yasmin\\Models\\Permissions|int\n    *** )\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Guild"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":639,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"destroy":{"name":"destroy","line":575,"short_desc":"Cleanly logs out of Discord.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"destroyUtils":{"name":"destroyUtils","line":575,"short_desc":"Stop timers of utils which have an instance of the event loop.","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"true","variadic":false,"is_by_ref":false}}},"destroyUtil":{"name":"destroyUtil","line":956,"short_desc":"Destroys an Util and calls `destroy` (requires that it is registered as such).","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":956,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"fetchApplication":{"name":"fetchApplication","line":758,"short_desc":"Obtains the OAuth Application of the bot from Discord.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\OAuthApplication"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"fetchInvite":{"name":"fetchInvite","line":774,"short_desc":"Obtains an invite from Discord. Resolves with an instance of Invite.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Invite"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"invite":{"name":"invite","line":774,"short_desc":"The invite code or an invite URL.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"withCounts":{"name":"withCounts","line":774,"short_desc":"Whether the invite should contain approximate counts.","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false}}},"fetchUser":{"name":"fetchUser","line":794,"short_desc":"Fetches an User from the API. Resolves with an User.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\User"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"userid":{"name":"userid","line":794,"short_desc":"The User ID to fetch.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"fetchVoiceRegions":{"name":"fetchVoiceRegions","line":812,"short_desc":"Obtains the available voice regions from Discord. Resolves with a Collection of Voice Region instances, mapped by their ID.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\VoiceRegion"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"fetchWebhook":{"name":"fetchWebhook","line":834,"short_desc":"Fetches a webhook from Discord. Resolves with an instance of Webhook.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Webhook"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"id":{"name":"id","line":834,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"token":{"name":"token","line":834,"short_desc":"","long_desc":null,"hint":[["string",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"string","attributes":{"startLine":834,"endLine":834}},"default":"null","variadic":false,"is_by_ref":false}}},"generateOAuthInvite":{"name":"generateOAuthInvite","line":851,"short_desc":"Generates a link that can be used to invite the bot to a guild. Resolves with a string.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"permissions":{"name":"permissions","line":851,"short_desc":"","long_desc":null,"hint":[["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":true,"is_by_ref":false}}},"getLoop":{"name":"getLoop","line":433,"short_desc":"Get the React Event Loop that is stored in this class.","long_desc":"","hint":[["\\React\\EventLoop\\LoopInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getOption":{"name":"getOption","line":443,"short_desc":"Get a specific option, or the default value.","long_desc":"","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":443,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"default":{"name":"default","line":443,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":"null","variadic":false,"is_by_ref":false}}},"getPing":{"name":"getPing","line":455,"short_desc":"Calculates the average ping. Or NAN.","long_desc":"","hint":[["int",false],["float",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getUtils":{"name":"getUtils","line":934,"short_desc":"Returns an array of classes with are registered as Util.","long_desc":"","hint":[["string",true]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getWSstatus":{"name":"getWSstatus","line":470,"short_desc":"Returns the computed WS status across all shards.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"login":{"name":"login","line":491,"short_desc":"Login into Discord. Opens a WebSocket Gateway connection. Resolves once a WebSocket connection has been successfully established (does not mean the client is ready).","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":{"token":{"name":"token","line":491,"short_desc":"Your token.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"force":{"name":"force","line":491,"short_desc":"Forces the client to get the gateway address from Discord.","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false}}},"on":{"name":"on","line":30,"short_desc":"Attach a listener to an event. The method is from the trait - only for documentation purpose here.","long_desc":null,"hint":null,"hint_desc":null,"tags":[],"modifiers":null,"is_by_ref":null,"exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"event":{"name":"event","line":30,"short_desc":null,"long_desc":null,"hint":[["string ",null]],"tags":[],"modifiers":null,"default":null,"variadic":null,"is_by_ref":null},"listener":{"name":"listener","line":30,"short_desc":null,"long_desc":null,"hint":[["callable ",null]],"tags":[],"modifiers":null,"default":null,"variadic":null,"is_by_ref":null}}},"once":{"name":"once","line":30,"short_desc":"Attach a listener to an event, for exactly once. The method is from the trait - only for documentation purpose here.","long_desc":null,"hint":null,"hint_desc":null,"tags":[],"modifiers":null,"is_by_ref":null,"exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"event":{"name":"event","line":30,"short_desc":null,"long_desc":null,"hint":[["string ",null]],"tags":[],"modifiers":null,"default":null,"variadic":null,"is_by_ref":null},"listener":{"name":"listener","line":30,"short_desc":null,"long_desc":null,"hint":[["callable ",null]],"tags":[],"modifiers":null,"default":null,"variadic":null,"is_by_ref":null}}},"registerUtil":{"name":"registerUtil","line":944,"short_desc":"Registers an Util, if it has a setLoop method. All methods used need to be static.","long_desc":"It will set the event loop through `setLoop` and on destroy will call `destroy`.","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":944,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"removeAllListeners":{"name":"removeAllListeners","line":30,"short_desc":"Remove all listeners from an event (or all listeners).","long_desc":null,"hint":null,"hint_desc":null,"tags":[],"modifiers":null,"is_by_ref":null,"exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"event":{"name":"event","line":30,"short_desc":null,"long_desc":null,"hint":null,"tags":[],"modifiers":null,"default":"null","variadic":null,"is_by_ref":null}}},"removeListener":{"name":"removeListener","line":30,"short_desc":"Remove specified listener from an event. The method is from the trait - only for documentation purpose here.","long_desc":null,"hint":null,"hint_desc":null,"tags":[],"modifiers":null,"is_by_ref":null,"exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"event":{"name":"event","line":30,"short_desc":null,"long_desc":null,"hint":[["string ",null]],"tags":[],"modifiers":null,"default":null,"variadic":null,"is_by_ref":null},"listener":{"name":"listener","line":30,"short_desc":null,"long_desc":null,"hint":[["callable ",null]],"tags":[],"modifiers":null,"default":null,"variadic":null,"is_by_ref":null}}},"serialize":{"name":"serialize","line":352,"short_desc":"Serializes the class.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"unserialize":{"name":"unserialize","line":371,"short_desc":"Unserializes the class and re-registers utils. Automatically creates an event loop.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":{"vars":{"name":"vars","line":371,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":{"VERSION":{"name":"VERSION","line":37,"short_desc":"The version of Yasmin.","long_desc":"","source":null},"WS_DEFAULT_COMPRESSION":{"name":"WS_DEFAULT_COMPRESSION","line":79,"short_desc":"WS default compression.","long_desc":"","source":null},"WS_STATUS_CONNECTED":{"name":"WS_STATUS_CONNECTED","line":67,"short_desc":"WS connection status: Connected (ready).","long_desc":"","source":null},"WS_STATUS_CONNECTING":{"name":"WS_STATUS_CONNECTING","line":49,"short_desc":"WS connection status: Connecting.","long_desc":"","source":null},"WS_STATUS_DISCONNECTED":{"name":"WS_STATUS_DISCONNECTED","line":43,"short_desc":"WS connection status: Disconnected.","long_desc":"","source":null},"WS_STATUS_IDLE":{"name":"WS_STATUS_IDLE","line":73,"short_desc":"WS connection status: Idling (disconnected and no reconnect planned).","long_desc":"","source":null},"WS_STATUS_NEARLY":{"name":"WS_STATUS_NEARLY","line":61,"short_desc":"WS connection status: Connected (not ready yet - nearly).","long_desc":"","source":null},"WS_STATUS_RECONNECTING":{"name":"WS_STATUS_RECONNECTING","line":55,"short_desc":"WS connection status: Reconnecting.","long_desc":"","source":null}}},"CharlotteDunois\\Yasmin\\ClientEvents":{"name":"CharlotteDunois\\Yasmin\\ClientEvents","line":17,"short_desc":"Documents all Client events. ($client->on('name here', callable))","long_desc":"The second parameter of *Update events is null, if cloning for that event is disabled.","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/ClientEvents.php","relative_file":"\/src\/ClientEvents.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"channelCreate":{"name":"channelCreate","line":99,"short_desc":"Emitted when a channel gets created.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":99,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Interfaces","ChannelInterface"],"attributes":{"startLine":99,"endLine":99}},"default":null,"variadic":false,"is_by_ref":false}}},"channelDelete":{"name":"channelDelete","line":111,"short_desc":"Emitted when a channel gets deleted.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":111,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Interfaces","ChannelInterface"],"attributes":{"startLine":111,"endLine":111}},"default":null,"variadic":false,"is_by_ref":false}}},"channelPinsUpdate":{"name":"channelPinsUpdate","line":117,"short_desc":"Emitted when a channel's pins gets updated. Due to the nature of the event, it's not possible to do much.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":117,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Interfaces","ChannelInterface"],"attributes":{"startLine":117,"endLine":117}},"default":null,"variadic":false,"is_by_ref":false},"time":{"name":"time","line":117,"short_desc":null,"long_desc":null,"hint":[["\\DateTime",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["DateTime"],"attributes":{"startLine":117,"endLine":117}},"attributes":{"startLine":117,"endLine":117}},"default":null,"variadic":false,"is_by_ref":false}}},"channelUpdate":{"name":"channelUpdate","line":105,"short_desc":"Emitted when a channel gets updated.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"new":{"name":"new","line":105,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Interfaces","ChannelInterface"],"attributes":{"startLine":105,"endLine":105}},"default":null,"variadic":false,"is_by_ref":false},"old":{"name":"old","line":105,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Interfaces","ChannelInterface"],"attributes":{"startLine":105,"endLine":105}},"attributes":{"startLine":105,"endLine":105}},"default":null,"variadic":false,"is_by_ref":false}}},"debug":{"name":"debug","line":75,"short_desc":"Debug messages.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":75,"short_desc":"","long_desc":null,"hint":[["string",false],["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"disconnect":{"name":"disconnect","line":28,"short_desc":"Emitted when the shard gets disconnected from the gateway.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"shard":{"name":"shard","line":28,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Shard",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Shard"],"attributes":{"startLine":28,"endLine":28}},"default":null,"variadic":false,"is_by_ref":false},"code":{"name":"code","line":28,"short_desc":null,"long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":28,"short_desc":null,"long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"error":{"name":"error","line":68,"short_desc":"Emitted when an error happens (inside the library or any listeners). You should always listen on this event.","long_desc":"Failing to listen on this event will result in an exception when an error event gets emitted.","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"error":{"name":"error","line":68,"short_desc":null,"long_desc":null,"hint":[["\\Throwable",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Throwable"],"attributes":{"startLine":68,"endLine":68}},"default":null,"variadic":false,"is_by_ref":false}}},"guildBanAdd":{"name":"guildBanAdd","line":147,"short_desc":"Emitted when someone gets banned.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":147,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Guild"],"attributes":{"startLine":147,"endLine":147}},"default":null,"variadic":false,"is_by_ref":false},"user":{"name":"user","line":147,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","User"],"attributes":{"startLine":147,"endLine":147}},"default":null,"variadic":false,"is_by_ref":false}}},"guildBanRemove":{"name":"guildBanRemove","line":153,"short_desc":"Emitted when someone gets unbanned.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":153,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Guild"],"attributes":{"startLine":153,"endLine":153}},"default":null,"variadic":false,"is_by_ref":false},"user":{"name":"user","line":153,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","User"],"attributes":{"startLine":153,"endLine":153}},"default":null,"variadic":false,"is_by_ref":false}}},"guildCreate":{"name":"guildCreate","line":123,"short_desc":"Emitted when a guild gets joined.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":123,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Guild"],"attributes":{"startLine":123,"endLine":123}},"default":null,"variadic":false,"is_by_ref":false}}},"guildDelete":{"name":"guildDelete","line":135,"short_desc":"Emitted when a guild gets left.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":135,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Guild"],"attributes":{"startLine":135,"endLine":135}},"default":null,"variadic":false,"is_by_ref":false}}},"guildMemberAdd":{"name":"guildMemberAdd","line":159,"short_desc":"Emitted when an user joins a guild.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"member":{"name":"member","line":159,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","GuildMember"],"attributes":{"startLine":159,"endLine":159}},"default":null,"variadic":false,"is_by_ref":false}}},"guildMemberRemove":{"name":"guildMemberRemove","line":171,"short_desc":"Emitted when an user leaves a guild.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"member":{"name":"member","line":171,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","GuildMember"],"attributes":{"startLine":171,"endLine":171}},"default":null,"variadic":false,"is_by_ref":false}}},"guildMemberUpdate":{"name":"guildMemberUpdate","line":165,"short_desc":"Emitted when a member gets updated.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"new":{"name":"new","line":165,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","GuildMember"],"attributes":{"startLine":165,"endLine":165}},"default":null,"variadic":false,"is_by_ref":false},"old":{"name":"old","line":165,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","GuildMember"],"attributes":{"startLine":165,"endLine":165}},"attributes":{"startLine":165,"endLine":165}},"default":null,"variadic":false,"is_by_ref":false}}},"guildMembersChunk":{"name":"guildMembersChunk","line":178,"short_desc":"Emitted when the gateway sends requested members. The collection consists of GuildMember instances, mapped by their user ID.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":178,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Guild"],"attributes":{"startLine":178,"endLine":178}},"default":null,"variadic":false,"is_by_ref":false},"members":{"name":"members","line":178,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Collect","Collection"],"attributes":{"startLine":178,"endLine":178}},"default":null,"variadic":false,"is_by_ref":false}}},"guildUnavailable":{"name":"guildUnavailable","line":141,"short_desc":"Emitted when a guild becomes (un)available.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":141,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Guild"],"attributes":{"startLine":141,"endLine":141}},"default":null,"variadic":false,"is_by_ref":false}}},"guildUpdate":{"name":"guildUpdate","line":129,"short_desc":"Emitted when a guild gets updated.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"new":{"name":"new","line":129,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Guild"],"attributes":{"startLine":129,"endLine":129}},"default":null,"variadic":false,"is_by_ref":false},"old":{"name":"old","line":129,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Guild"],"attributes":{"startLine":129,"endLine":129}},"attributes":{"startLine":129,"endLine":129}},"default":null,"variadic":false,"is_by_ref":false}}},"message":{"name":"message","line":202,"short_desc":"Emitted when a message gets received.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":202,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Message"],"attributes":{"startLine":202,"endLine":202}},"default":null,"variadic":false,"is_by_ref":false}}},"messageDelete":{"name":"messageDelete","line":214,"short_desc":"Emitted when a (cached) message gets deleted.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":214,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Message"],"attributes":{"startLine":214,"endLine":214}},"default":null,"variadic":false,"is_by_ref":false}}},"messageDeleteBulk":{"name":"messageDeleteBulk","line":221,"short_desc":"Emitted when multiple (cached) message gets deleted. The collection consists of Message instances, mapped by their ID.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Message"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"messages":{"name":"messages","line":221,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Collect","Collection"],"attributes":{"startLine":221,"endLine":221}},"default":null,"variadic":false,"is_by_ref":false}}},"messageDeleteBulkRaw":{"name":"messageDeleteBulkRaw","line":53,"short_desc":"Emitted when multple uncached messages gets deleted.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":53,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Interfaces","TextChannelInterface"],"attributes":{"startLine":53,"endLine":53}},"default":null,"variadic":false,"is_by_ref":false},"messageIDs":{"name":"messageIDs","line":53,"short_desc":null,"long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"messageDeleteRaw":{"name":"messageDeleteRaw","line":47,"short_desc":"Emitted when an uncached message gets deleted.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":47,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Interfaces","TextChannelInterface"],"attributes":{"startLine":47,"endLine":47}},"default":null,"variadic":false,"is_by_ref":false},"messageID":{"name":"messageID","line":47,"short_desc":null,"long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"messageReactionAdd":{"name":"messageReactionAdd","line":227,"short_desc":"Emitted when someone reacts to a (cached) message.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"reaction":{"name":"reaction","line":227,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\MessageReaction",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","MessageReaction"],"attributes":{"startLine":227,"endLine":227}},"default":null,"variadic":false,"is_by_ref":false},"user":{"name":"user","line":227,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","User"],"attributes":{"startLine":227,"endLine":227}},"default":null,"variadic":false,"is_by_ref":false}}},"messageReactionRemove":{"name":"messageReactionRemove","line":233,"short_desc":"Emitted when a reaction from a (cached) message gets removed.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"reaction":{"name":"reaction","line":233,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\MessageReaction",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","MessageReaction"],"attributes":{"startLine":233,"endLine":233}},"default":null,"variadic":false,"is_by_ref":false},"user":{"name":"user","line":233,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","User"],"attributes":{"startLine":233,"endLine":233}},"default":null,"variadic":false,"is_by_ref":false}}},"messageReactionRemoveAll":{"name":"messageReactionRemoveAll","line":239,"short_desc":"Emitted when all reactions from a (cached) message gets removed.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":239,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Message"],"attributes":{"startLine":239,"endLine":239}},"default":null,"variadic":false,"is_by_ref":false}}},"messageUpdate":{"name":"messageUpdate","line":208,"short_desc":"Emitted when a (cached) message gets updated (does not mean the message got edited, check the edited timestamp for that).","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"new":{"name":"new","line":208,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Message"],"attributes":{"startLine":208,"endLine":208}},"default":null,"variadic":false,"is_by_ref":false},"old":{"name":"old","line":208,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Message"],"attributes":{"startLine":208,"endLine":208}},"attributes":{"startLine":208,"endLine":208}},"default":null,"variadic":false,"is_by_ref":false}}},"messageUpdateRaw":{"name":"messageUpdateRaw","line":61,"short_desc":"Emitted when an uncached message gets updated (does not mean the message got edited, check the edited timestamp for that).","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":{"see":[["https:\/\/discordapp.com\/developers\/docs\/topics\/gateway#message-update"],["https:\/\/discordapp.com\/developers\/docs\/resources\/channel#message-object"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":61,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Interfaces","TextChannelInterface"],"attributes":{"startLine":61,"endLine":61}},"default":null,"variadic":false,"is_by_ref":false},"data":{"name":"data","line":61,"short_desc":null,"long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"presenceUpdate":{"name":"presenceUpdate","line":245,"short_desc":"Emitted when a presence updates.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"new":{"name":"new","line":245,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Presence"],"attributes":{"startLine":245,"endLine":245}},"default":null,"variadic":false,"is_by_ref":false},"old":{"name":"old","line":245,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Presence"],"attributes":{"startLine":245,"endLine":245}},"attributes":{"startLine":245,"endLine":245}},"default":null,"variadic":false,"is_by_ref":false}}},"ratelimit":{"name":"ratelimit","line":93,"short_desc":"Ratelimit information.","long_desc":"The array has the following format:\n```\narray(\n    'endpoint' => string,\n    'global' => bool,\n    'limit' => int|float, (float = \\INF)\n    'remaining => int,\n    'resetTime' => float|null\n)\n```","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":93,"short_desc":null,"long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"raw":{"name":"raw","line":41,"short_desc":"Emitted when we receive a message from the gateway.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":41,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"ready":{"name":"ready","line":22,"short_desc":"Emitted each time the client turns ready.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"reconnect":{"name":"reconnect","line":34,"short_desc":"Emitted when the shard tries to reconnect.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"shard":{"name":"shard","line":34,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Shard",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Shard"],"attributes":{"startLine":34,"endLine":34}},"default":null,"variadic":false,"is_by_ref":false}}},"roleCreate":{"name":"roleCreate","line":184,"short_desc":"Emitted when a role gets created.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"role":{"name":"role","line":184,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Role"],"attributes":{"startLine":184,"endLine":184}},"default":null,"variadic":false,"is_by_ref":false}}},"roleDelete":{"name":"roleDelete","line":196,"short_desc":"Emitted when a role gets deleted.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"role":{"name":"role","line":196,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Role"],"attributes":{"startLine":196,"endLine":196}},"default":null,"variadic":false,"is_by_ref":false}}},"roleUpdate":{"name":"roleUpdate","line":190,"short_desc":"Emitted when a role gets updated.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"new":{"name":"new","line":190,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Role"],"attributes":{"startLine":190,"endLine":190}},"default":null,"variadic":false,"is_by_ref":false},"old":{"name":"old","line":190,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Role"],"attributes":{"startLine":190,"endLine":190}},"attributes":{"startLine":190,"endLine":190}},"default":null,"variadic":false,"is_by_ref":false}}},"typingStart":{"name":"typingStart","line":251,"short_desc":"Emitted when someone starts typing in the channel.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":251,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Interfaces","TextChannelInterface"],"attributes":{"startLine":251,"endLine":251}},"default":null,"variadic":false,"is_by_ref":false},"user":{"name":"user","line":251,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","User"],"attributes":{"startLine":251,"endLine":251}},"default":null,"variadic":false,"is_by_ref":false}}},"typingStop":{"name":"typingStop","line":257,"short_desc":"Emitted when someone stops typing in the channel.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":257,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Interfaces","TextChannelInterface"],"attributes":{"startLine":257,"endLine":257}},"default":null,"variadic":false,"is_by_ref":false},"user":{"name":"user","line":257,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","User"],"attributes":{"startLine":257,"endLine":257}},"default":null,"variadic":false,"is_by_ref":false}}},"userUpdate":{"name":"userUpdate","line":263,"short_desc":"Emitted when someone updates their user account (username\/avatar\/etc.).","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"new":{"name":"new","line":263,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","User"],"attributes":{"startLine":263,"endLine":263}},"default":null,"variadic":false,"is_by_ref":false},"old":{"name":"old","line":263,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","User"],"attributes":{"startLine":263,"endLine":263}},"attributes":{"startLine":263,"endLine":263}},"default":null,"variadic":false,"is_by_ref":false}}},"voiceServerUpdate":{"name":"voiceServerUpdate","line":271,"short_desc":"Emitted when Discord responds to the user's Voice State Update event.","long_desc":"If you get `null` for `$data`, then this means that there's no endpoint yet and need to await it = Awaiting Endpoint.","hint":[["void",false]],"hint_desc":"","tags":{"see":[["https:\/\/discordapp.com\/developers\/docs\/topics\/gateway#voice-server-update"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":271,"short_desc":null,"long_desc":null,"hint":[["array",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"array","attributes":{"startLine":271,"endLine":271}},"default":null,"variadic":false,"is_by_ref":false}}},"voiceStateUpdate":{"name":"voiceStateUpdate","line":277,"short_desc":"Emitted when a member's voice state changes (leaves\/joins\/etc.).","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"new":{"name":"new","line":277,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","GuildMember"],"attributes":{"startLine":277,"endLine":277}},"default":null,"variadic":false,"is_by_ref":false},"old":{"name":"old","line":277,"short_desc":null,"long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","GuildMember"],"attributes":{"startLine":277,"endLine":277}},"attributes":{"startLine":277,"endLine":277}},"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\DiscordException":{"name":"CharlotteDunois\\Yasmin\\DiscordException","line":15,"short_desc":"Exception for Discord.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/DiscordException.php","relative_file":"\/src\/DiscordException.php","parent":"RuntimeException","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":[],"constants":[]},"CharlotteDunois\\Yasmin\\HTTP\\DiscordAPIException":{"name":"CharlotteDunois\\Yasmin\\HTTP\\DiscordAPIException","line":15,"short_desc":"Represents an error from the Discord HTTP API.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\HTTP","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/HTTP\/DiscordAPIException.php","relative_file":"\/src\/HTTP\/DiscordAPIException.php","parent":"CharlotteDunois\\Yasmin\\DiscordException","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"path":{"name":"path","line":20,"short_desc":"The path of the request relative to the HTTP endpoint.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"default":null,"errors":[],"source":null}},"methods":{"__construct":{"name":"__construct","line":27,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"path":{"name":"path","line":27,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"error":{"name":"error","line":27,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\CategoryChannelInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\CategoryChannelInterface","line":15,"short_desc":"Something all guild category channels implement.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/CategoryChannelInterface.php","relative_file":"\/src\/Interfaces\/CategoryChannelInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface"},"traits":[],"source":null,"properties":[],"methods":[],"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface","line":18,"short_desc":"Something all channels implement.","long_desc":"","hint":null,"tags":{"method":[["string","","getId()","","","","","","","","","","","","","","","","Gets","the","channel's","ID."],["int","","","","","getCreatedTimestamp()","","Gets","the","timestamp","of","when","this","channel","was","created."]]},"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/ChannelInterface.php","relative_file":"\/src\/Interfaces\/ChannelInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"_patch":{"name":"_patch","line":22,"short_desc":"Internally patches the instance.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":22,"short_desc":null,"long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"getCreatedTimestamp":{"name":"getCreatedTimestamp","line":18,"short_desc":"Gets the timestamp of when this channel was created.","long_desc":null,"hint":[["int",null]],"hint_desc":null,"tags":[],"modifiers":null,"is_by_ref":null,"exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getId":{"name":"getId","line":18,"short_desc":"Gets the channel's ID.","long_desc":null,"hint":[["string",null]],"hint_desc":null,"tags":[],"modifiers":null,"is_by_ref":null,"exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\ChannelStorageInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\ChannelStorageInterface","line":15,"short_desc":"Something all channel storages implement. The storage also is used as factory.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/ChannelStorageInterface.php","relative_file":"\/src\/Interfaces\/ChannelStorageInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"all":{"name":"all","line":50,"short_desc":"Returns all items.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",true]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"current":{"name":"current","line":20,"short_desc":"Returns the current element. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"get":{"name":"get","line":74,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":74,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":66,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":66,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"key":{"name":"key","line":26,"short_desc":"Fetch the key from the current element. From Iterator interface.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"next":{"name":"next","line":32,"short_desc":"Advances the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"resolve":{"name":"resolve","line":58,"short_desc":"Resolves given data to a channel.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":58,"short_desc":"string\/int = channel ID","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false],["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"rewind":{"name":"rewind","line":38,"short_desc":"Resets the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"set":{"name":"set","line":83,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":83,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":83,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"valid":{"name":"valid","line":44,"short_desc":"Checks if current position is valid. From Iterator interface.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\DMChannelInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\DMChannelInterface","line":15,"short_desc":"Something all direct message channels implement.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/DMChannelInterface.php","relative_file":"\/src\/Interfaces\/DMChannelInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface","CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface"},"traits":[],"source":null,"properties":[],"methods":{"isRecipient":{"name":"isRecipient","line":22,"short_desc":"Determines whether a given user is a recipient of this channel.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":22,"short_desc":"The User instance or user ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\EmojiStorageInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\EmojiStorageInterface","line":15,"short_desc":"Something all emoji storages implement. The storage also is used as factory.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/EmojiStorageInterface.php","relative_file":"\/src\/Interfaces\/EmojiStorageInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"all":{"name":"all","line":50,"short_desc":"Returns all items.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",true]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"current":{"name":"current","line":20,"short_desc":"Returns the current element. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"get":{"name":"get","line":74,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":74,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":66,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":66,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"key":{"name":"key","line":26,"short_desc":"Fetch the key from the current element. From Iterator interface.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"next":{"name":"next","line":32,"short_desc":"Advances the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"resolve":{"name":"resolve","line":58,"short_desc":"Resolves given data to an emoji.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"emoji":{"name":"emoji","line":58,"short_desc":"string\/int = emoji ID","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",false],["\\CharlotteDunois\\Yasmin\\Models\\MessageReaction",false],["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"rewind":{"name":"rewind","line":38,"short_desc":"Resets the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"set":{"name":"set","line":83,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":83,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":83,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"valid":{"name":"valid","line":44,"short_desc":"Checks if current position is valid. From Iterator interface.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\GroupDMChannelInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\GroupDMChannelInterface","line":15,"short_desc":"Something all group direct message channels implement.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/GroupDMChannelInterface.php","relative_file":"\/src\/Interfaces\/GroupDMChannelInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\DMChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\DMChannelInterface"},"traits":[],"source":null,"properties":[],"methods":[],"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface","line":21,"short_desc":"Something all guild channels implement.","long_desc":"","hint":null,"tags":{"method":[["string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","getName()","","","","","","","","","","","","","","","","","","Gets","the","channel's","name."],["\\CharlotteDunois\\Yasmin\\Models\\Guild","","","","","","","","","","","","","","","","","getGuild()","","","","","","","","","","","","","","","","","Gets","the","associated","guild."],["int","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","getPosition()","","","","","","","","","","","","","","Gets","the","channel's","position."],["\\CharlotteDunois\\Collect\\Collection","","","","","","","","","","","","","","","","","","getPermissionOverwrites()","","Gets","the","channel's","permission","overwrites."],["\\CharlotteDunois\\Yasmin\\Models\\CategoryChannel|null","","getParent()","","","","","","","","","","","","","","","","Gets","the","channel's","parent,","or","null."]]},"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/GuildChannelInterface.php","relative_file":"\/src\/Interfaces\/GuildChannelInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface"},"traits":[],"source":null,"properties":[],"methods":{"clone":{"name":"clone","line":30,"short_desc":"Clones a guild channel. Resolves with an instance of GuildChannelInterface.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":30,"short_desc":"","long_desc":null,"hint":[["string",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"string","attributes":{"startLine":30,"endLine":30}},"default":"null","variadic":false,"is_by_ref":false},"withPermissions":{"name":"withPermissions","line":30,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"true","variadic":false,"is_by_ref":false},"withTopic":{"name":"withTopic","line":30,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"true","variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":30,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"delete":{"name":"delete","line":63,"short_desc":"Deletes the channel.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"reason":{"name":"reason","line":63,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"edit":{"name":"edit","line":56,"short_desc":"Edits the channel. Resolves with $this.","long_desc":"Options are as following (at least one is required).\n\n```\narray(\n   'name' => string,\n   'position' => int,\n   'topic' => string, (text channels only)\n   'nsfw' => bool, (text channels only)\n   'bitrate' => int, (voice channels only)\n   'userLimit' => int, (voice channels only)\n   'slowmode' => int, (text channels only)\n   'parent' => \\CharlotteDunois\\Yasmin\\Models\\CategoryChannel|string, (string = channel ID)\n   'permissionOverwrites' => \\CharlotteDunois\\Collect\\Collection|array (an array or Collection of PermissionOverwrite instances or permission overwrite arrays)\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":56,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":56,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"getGuild":{"name":"getGuild","line":21,"short_desc":"Gets the associated guild.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",null]],"hint_desc":null,"tags":[],"modifiers":null,"is_by_ref":null,"exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getName":{"name":"getName","line":21,"short_desc":"Gets the channel's name.","long_desc":null,"hint":[["string",null]],"hint_desc":null,"tags":[],"modifiers":null,"is_by_ref":null,"exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getParent":{"name":"getParent","line":21,"short_desc":"Gets the channel's parent, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\CategoryChannel|null",null]],"hint_desc":null,"tags":[],"modifiers":null,"is_by_ref":null,"exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getPermissionOverwrites":{"name":"getPermissionOverwrites","line":21,"short_desc":"Gets the channel's permission overwrites.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",null]],"hint_desc":null,"tags":[],"modifiers":null,"is_by_ref":null,"exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getPosition":{"name":"getPosition","line":21,"short_desc":"Gets the channel's position.","long_desc":null,"hint":[["int",null]],"hint_desc":null,"tags":[],"modifiers":null,"is_by_ref":null,"exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"lockPermissions":{"name":"lockPermissions","line":107,"short_desc":"Locks in the permission overwrites from the parent channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""]],"errors":[],"example":null,"source":null,"parameters":{"reason":{"name":"reason","line":107,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"overwritePermissions":{"name":"overwritePermissions","line":99,"short_desc":"Overwrites the permissions for a member or role in this channel. Resolves with an instance of PermissionOverwrite.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"memberOrRole":{"name":"memberOrRole","line":99,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"allow":{"name":"allow","line":99,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"deny":{"name":"deny","line":99,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false],["int",false]],"tags":[],"modifiers":null,"default":"0","variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":99,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"overwritesFor":{"name":"overwritesFor","line":88,"short_desc":"Returns the permissions overwrites for the given member.","long_desc":"```\narray(\n    'everyone' => \\CharlotteDunois\\Yasmin\\Models\\PermissionOverwrite|null,\n    'member' => \\CharlotteDunois\\Yasmin\\Models\\PermissionOverwrite|null,\n    'roles' => \\CharlotteDunois\\Yasmin\\Models\\PermissionOverwrite[]\n)\n```","hint":[["array",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"member":{"name":"member","line":88,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"permissionsFor":{"name":"permissionsFor","line":71,"short_desc":"Returns the permissions for the given member.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"member":{"name":"member","line":71,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"setNSFW":{"name":"setNSFW","line":125,"short_desc":"Sets the nsfw flag of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"nsfw":{"name":"nsfw","line":125,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":125,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setName":{"name":"setName","line":116,"short_desc":"Sets the name of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":116,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":116,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setParent":{"name":"setParent","line":134,"short_desc":"Sets the parent of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"parent":{"name":"parent","line":134,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\CategoryChannel",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":134,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setPermissionOverwrites":{"name":"setPermissionOverwrites","line":143,"short_desc":"Sets the permission overwrites of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"permissionOverwrites":{"name":"permissionOverwrites","line":143,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false],["array",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":143,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setPosition":{"name":"setPosition","line":152,"short_desc":"Sets the position of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"position":{"name":"position","line":152,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":152,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\GuildMemberStorageInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\GuildMemberStorageInterface","line":15,"short_desc":"Something all guild member storages implement. The storage also is used as factory.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/GuildMemberStorageInterface.php","relative_file":"\/src\/Interfaces\/GuildMemberStorageInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"all":{"name":"all","line":50,"short_desc":"Returns all items.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",true]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"current":{"name":"current","line":20,"short_desc":"Returns the current element. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"get":{"name":"get","line":74,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":74,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":66,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":66,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"key":{"name":"key","line":26,"short_desc":"Fetch the key from the current element. From Iterator interface.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"next":{"name":"next","line":32,"short_desc":"Advances the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"resolve":{"name":"resolve","line":58,"short_desc":"Resolves given data to a guildmember.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guildmember":{"name":"guildmember","line":58,"short_desc":"string\/int = user ID","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["\\CharlotteDunois\\Yasmin\\Models\\User",false],["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"rewind":{"name":"rewind","line":38,"short_desc":"Resets the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"set":{"name":"set","line":83,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":83,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":83,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"valid":{"name":"valid","line":44,"short_desc":"Checks if current position is valid. From Iterator interface.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\GuildNewsChannelInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\GuildNewsChannelInterface","line":15,"short_desc":"Something all guild news channels implement.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/GuildNewsChannelInterface.php","relative_file":"\/src\/Interfaces\/GuildNewsChannelInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface","CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface"},"traits":[],"source":null,"properties":[],"methods":{"createInvite":{"name":"createInvite","line":33,"short_desc":"Creates an invite. Resolves with an instance of Invite.","long_desc":"Options are as following (all are optional).\n\n```\narray(\n   'maxAge' => int,\n   'maxUses' => int, (0 = unlimited)\n   'temporary' => bool,\n   'unique' => bool\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":33,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"fetchInvites":{"name":"fetchInvites","line":40,"short_desc":"Fetches all invites of this channel. Resolves with a Collection of Invite instances, mapped by their code.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Invite"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"setTopic":{"name":"setTopic","line":49,"short_desc":"Sets the topic of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"topic":{"name":"topic","line":49,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":49,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\GuildStorageInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\GuildStorageInterface","line":15,"short_desc":"Something all guild storages implement. The storage also is used as factory.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/GuildStorageInterface.php","relative_file":"\/src\/Interfaces\/GuildStorageInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"all":{"name":"all","line":50,"short_desc":"Returns all items.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",true]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"current":{"name":"current","line":20,"short_desc":"Returns the current element. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"get":{"name":"get","line":74,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":74,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":66,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":66,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"key":{"name":"key","line":26,"short_desc":"Fetch the key from the current element. From Iterator interface.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"next":{"name":"next","line":32,"short_desc":"Advances the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"resolve":{"name":"resolve","line":58,"short_desc":"Resolves given data to a guild.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":58,"short_desc":"string\/int = guild ID","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"rewind":{"name":"rewind","line":38,"short_desc":"Resets the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"set":{"name":"set","line":83,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":83,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":83,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"valid":{"name":"valid","line":44,"short_desc":"Checks if current position is valid. From Iterator interface.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\GuildStoreChannelInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\GuildStoreChannelInterface","line":15,"short_desc":"Something all guild store channels implement.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/GuildStoreChannelInterface.php","relative_file":"\/src\/Interfaces\/GuildStoreChannelInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface"},"traits":[],"source":null,"properties":[],"methods":[],"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\GuildTextChannelInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\GuildTextChannelInterface","line":15,"short_desc":"Something all guild text channels implement.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/GuildTextChannelInterface.php","relative_file":"\/src\/Interfaces\/GuildTextChannelInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface","CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface"},"traits":[],"source":null,"properties":[],"methods":{"bulkDelete":{"name":"bulkDelete","line":23,"short_desc":"Deletes multiple messages at once. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"messages":{"name":"messages","line":23,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false],["array",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":23,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false},"filterOldMessages":{"name":"filterOldMessages","line":23,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false}}},"createInvite":{"name":"createInvite","line":42,"short_desc":"Creates an invite. Resolves with an instance of Invite.","long_desc":"Options are as following (all are optional).\n\n```\narray(\n   'maxAge' => int,\n   'maxUses' => int, (0 = unlimited)\n   'temporary' => bool,\n   'unique' => bool\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":42,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"fetchInvites":{"name":"fetchInvites","line":49,"short_desc":"Fetches all invites of this channel. Resolves with a Collection of Invite instances, mapped by their code.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Invite"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"setSlowmode":{"name":"setSlowmode","line":57,"short_desc":"Sets the slowmode in seconds for this channel.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"slowmode":{"name":"slowmode","line":57,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":57,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setTopic":{"name":"setTopic","line":66,"short_desc":"Sets the topic of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"topic":{"name":"topic","line":66,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":66,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\GuildVoiceChannelInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\GuildVoiceChannelInterface","line":15,"short_desc":"Something all guild voice channels implement.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/GuildVoiceChannelInterface.php","relative_file":"\/src\/Interfaces\/GuildVoiceChannelInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface","CharlotteDunois\\Yasmin\\Interfaces\\VoiceChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\VoiceChannelInterface"},"traits":[],"source":null,"properties":[],"methods":{"setTopic":{"name":"setTopic","line":23,"short_desc":"Sets the topic of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"topic":{"name":"topic","line":23,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":23,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\MessageStorageInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\MessageStorageInterface","line":15,"short_desc":"Something all message storages implement. The storage also is used as factory.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/MessageStorageInterface.php","relative_file":"\/src\/Interfaces\/MessageStorageInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"all":{"name":"all","line":50,"short_desc":"Returns all items.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",true]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"current":{"name":"current","line":20,"short_desc":"Returns the current element. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"get":{"name":"get","line":66,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":66,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":58,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":58,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"key":{"name":"key","line":26,"short_desc":"Fetch the key from the current element. From Iterator interface.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"next":{"name":"next","line":32,"short_desc":"Advances the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"rewind":{"name":"rewind","line":38,"short_desc":"Resets the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"set":{"name":"set","line":75,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":75,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":75,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"valid":{"name":"valid","line":44,"short_desc":"Checks if current position is valid. From Iterator interface.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\PresenceStorageInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\PresenceStorageInterface","line":15,"short_desc":"Something all presence storages implement. The storage also is used as factory.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/PresenceStorageInterface.php","relative_file":"\/src\/Interfaces\/PresenceStorageInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"all":{"name":"all","line":50,"short_desc":"Returns all items.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",true]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"current":{"name":"current","line":20,"short_desc":"Returns the current element. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"get":{"name":"get","line":74,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":74,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":66,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":66,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"key":{"name":"key","line":26,"short_desc":"Fetch the key from the current element. From Iterator interface.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"next":{"name":"next","line":32,"short_desc":"Advances the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"resolve":{"name":"resolve","line":58,"short_desc":"Resolves given data to a presence.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"presence":{"name":"presence","line":58,"short_desc":"string\/int = user ID","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false],["\\CharlotteDunois\\Yasmin\\Models\\User",false],["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"rewind":{"name":"rewind","line":38,"short_desc":"Resets the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"set":{"name":"set","line":83,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":83,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":83,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"valid":{"name":"valid","line":44,"short_desc":"Checks if current position is valid. From Iterator interface.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\RatelimitBucketInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\RatelimitBucketInterface","line":25,"short_desc":"This interface defines required methods and their arguments for managing route ratelimits using various systems.<br>\nThe ratelimit bucket queue is always managed in memory (as in belongs to that process), however the ratelimits are distributed to the used system.","long_desc":"Included are two ratelimit bucket systems:<br>\n * In memory ratelimit bucket, using arrays - Class: `\\CharlotteDunois\\Yasmin\\HTTP\\RatelimitBucket` (default)<br>\n * Redis ratelimit bucket, using Athena to interface with Redis - Class: `\\CharlotteDunois\\Yasmin\\HTTP\\AthenaRatelimitBucket`\n\nTo use a different one than the default, you have to pass the full qualified class name to the client constructor as client option `http.ratelimitbucket.name`.\n\nThe Redis ratelimit bucket system uses Athena, an asynchronous redis cache for PHP. The package is called `charlottedunois\/athena` (which is suggested on composer).<br>\nTo be able to use the Redis ratelimit bucket, you need to pass an instance of `AthenaCache` as client option `http.ratelimitbucket.athena` to the client.","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/RatelimitBucketInterface.php","relative_file":"\/src\/Interfaces\/RatelimitBucketInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":32,"short_desc":"Initializes the bucket.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":{"api":{"name":"api","line":32,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\HTTP\\APIManager",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","HTTP","APIManager"],"attributes":{"startLine":32,"endLine":32}},"default":null,"variadic":false,"is_by_ref":false},"endpoint":{"name":"endpoint","line":32,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"__destruct":{"name":"__destruct","line":37,"short_desc":"Destroys the bucket.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"clear":{"name":"clear","line":112,"short_desc":"Unsets all queue items.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getEndpoint":{"name":"getEndpoint","line":65,"short_desc":"Returns the endpoint this bucket is for.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getMeta":{"name":"getMeta","line":100,"short_desc":"Retrieves ratelimit meta data.","long_desc":"The resolved value must be:\n```\narray(\n    'limited' => bool,\n    'resetTime' => float|null\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false],["array",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"handleRatelimit":{"name":"handleRatelimit","line":59,"short_desc":"Sets the ratelimits from the response.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false],["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"limit":{"name":"limit","line":59,"short_desc":"","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":59,"endLine":59}},"default":null,"variadic":false,"is_by_ref":false},"remaining":{"name":"remaining","line":59,"short_desc":"","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":59,"endLine":59}},"default":null,"variadic":false,"is_by_ref":false},"resetTime":{"name":"resetTime","line":59,"short_desc":"Reset time in seconds with milliseconds.","long_desc":null,"hint":[["float",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"float","attributes":{"startLine":59,"endLine":59}},"default":null,"variadic":false,"is_by_ref":false}}},"isBusy":{"name":"isBusy","line":43,"short_desc":"Whether we are busy.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"push":{"name":"push","line":78,"short_desc":"Pushes a new request into the queue.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"request":{"name":"request","line":78,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\HTTP\\APIRequest",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","HTTP","APIRequest"],"attributes":{"startLine":78,"endLine":78}},"default":null,"variadic":false,"is_by_ref":false}}},"setBusy":{"name":"setBusy","line":50,"short_desc":"Sets the busy flag (marking as running).","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"busy":{"name":"busy","line":50,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false}}},"shift":{"name":"shift","line":106,"short_desc":"Returns the first queue item or false. Modifies remaining ratelimit.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\HTTP\\APIRequest",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"size":{"name":"size","line":71,"short_desc":"Returns the size of the queue.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"unshift":{"name":"unshift","line":85,"short_desc":"Unshifts a new request into the queue. Modifies remaining ratelimit.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"request":{"name":"request","line":85,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\HTTP\\APIRequest",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","HTTP","APIRequest"],"attributes":{"startLine":85,"endLine":85}},"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\RoleStorageInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\RoleStorageInterface","line":15,"short_desc":"Something all role storages implement. The storage also is used as factory.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/RoleStorageInterface.php","relative_file":"\/src\/Interfaces\/RoleStorageInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"all":{"name":"all","line":50,"short_desc":"Returns all items.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",true]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"current":{"name":"current","line":20,"short_desc":"Returns the current element. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"get":{"name":"get","line":66,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":66,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"key":{"name":"key","line":26,"short_desc":"Fetch the key from the current element. From Iterator interface.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"next":{"name":"next","line":32,"short_desc":"Advances the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"resolve":{"name":"resolve","line":58,"short_desc":"Resolves given data to a Role.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"role":{"name":"role","line":58,"short_desc":"string\/int = role ID","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"rewind":{"name":"rewind","line":38,"short_desc":"Resets the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"set":{"name":"set","line":75,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":75,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":75,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"valid":{"name":"valid","line":44,"short_desc":"Checks if current position is valid. From Iterator interface.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface","line":15,"short_desc":"Something all storages implement. The storage also is used as factory.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/StorageInterface.php","relative_file":"\/src\/Interfaces\/StorageInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"Countable":"Countable","Iterator":"Iterator"},"traits":[],"source":null,"properties":[],"methods":{"all":{"name":"all","line":50,"short_desc":"Returns all items.","long_desc":"","hint":[["mixed",true]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"clear":{"name":"clear","line":100,"short_desc":"Clears the Storage.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"copy":{"name":"copy","line":62,"short_desc":"Returns a copy of itself. This does not make a copy of the stored data.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"count":{"name":"count","line":56,"short_desc":"Returns the total number of items. From Countable interface.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"current":{"name":"current","line":20,"short_desc":"Returns the current element. From Iterator interface.","long_desc":"","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"delete":{"name":"delete","line":94,"short_desc":"Removes an item.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":94,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"filter":{"name":"filter","line":114,"short_desc":"Filters the storage by a given callback, keeping only those items that pass a given truth test. Returns a new Storage instance.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"closure":{"name":"closure","line":114,"short_desc":"","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false}}},"first":{"name":"first","line":121,"short_desc":"Returns the first element that passes a given truth test.","long_desc":"","hint":[["mixed",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"closure":{"name":"closure","line":121,"short_desc":"","long_desc":null,"hint":[["callable",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"callable","attributes":{"startLine":121,"endLine":121}},"default":"null","variadic":false,"is_by_ref":false}}},"get":{"name":"get","line":78,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["mixed",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":78,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":70,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":70,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"indexOf":{"name":"indexOf","line":107,"short_desc":"Returns the position of the given value in the storage. Returns null if the given value couldn't be found.","long_desc":"","hint":[["int",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"value":{"name":"value","line":107,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"key":{"name":"key","line":26,"short_desc":"Fetch the key from the current element. From Iterator interface.","long_desc":"","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"last":{"name":"last","line":128,"short_desc":"Returns the last element that passes a given truth test.","long_desc":"","hint":[["mixed",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"closure":{"name":"closure","line":128,"short_desc":"","long_desc":null,"hint":[["callable",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"callable","attributes":{"startLine":128,"endLine":128}},"default":"null","variadic":false,"is_by_ref":false}}},"max":{"name":"max","line":172,"short_desc":"Return the maximum value of a given key.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":172,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":"''","variadic":false,"is_by_ref":false}}},"min":{"name":"min","line":179,"short_desc":"Return the minimum value of a given key.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":179,"short_desc":"","long_desc":null,"hint":[["mixed",false],["null",false]],"tags":[],"modifiers":null,"default":"null","variadic":false,"is_by_ref":false}}},"next":{"name":"next","line":32,"short_desc":"Advances the internal pointer. From Iterator interface.","long_desc":"","hint":[["mixed",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"reduce":{"name":"reduce","line":136,"short_desc":"Reduces the collection to a single value, passing the result of each iteration into the subsequent iteration.","long_desc":"","hint":[["mixed",false],["null",false],["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"closure":{"name":"closure","line":136,"short_desc":"","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false},"carry":{"name":"carry","line":136,"short_desc":"","long_desc":null,"hint":[["mixed",false],["null",false]],"tags":[],"modifiers":null,"default":"null","variadic":false,"is_by_ref":false}}},"rewind":{"name":"rewind","line":38,"short_desc":"Resets the internal pointer. From Iterator interface.","long_desc":"","hint":[["mixed",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"set":{"name":"set","line":87,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":87,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":87,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"sort":{"name":"sort","line":143,"short_desc":"Sorts the collection. Returns a new Storage instance.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":["\"2\" @param tags are expected but only \"1\" found"],"example":null,"source":null,"parameters":{"descending":{"name":"descending","line":143,"short_desc":null,"long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false},"options":{"name":"options","line":143,"short_desc":null,"long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"\\SORT_REGULAR","variadic":false,"is_by_ref":false}}},"sortCustom":{"name":"sortCustom","line":158,"short_desc":"Sorts the collection using a custom sorting function. Returns a new Storage instance.","long_desc":"","hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"closure":{"name":"closure","line":158,"short_desc":"Callback specification: `function ($a, $b): int`","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false}}},"sortCustomKey":{"name":"sortCustomKey","line":165,"short_desc":"Sorts the collection by key using a custom sorting function. Returns a new Storage instance.","long_desc":"","hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"closure":{"name":"closure","line":165,"short_desc":"Callback specification: `function ($a, $b): int`","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false}}},"sortKey":{"name":"sortKey","line":151,"short_desc":"Sorts the collection by key. Returns a new Storage instance.","long_desc":"","hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"descending":{"name":"descending","line":151,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false},"options":{"name":"options","line":151,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"\\SORT_REGULAR","variadic":false,"is_by_ref":false}}},"valid":{"name":"valid","line":44,"short_desc":"Checks if current position is valid. From Iterator interface.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface","line":18,"short_desc":"Something all text channels implement.","long_desc":"","hint":null,"tags":{"method":[["\\CharlotteDunois\\Yasmin\\Interfaces\\MessageStorageInterface","","getMessages()","","","","","","","Gets","the","storage","with","all","cached","messages."],["string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","getLastMessageID()","","Gets","the","ID","of","the","last","sent","message","in","this","channel."]]},"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/TextChannelInterface.php","relative_file":"\/src\/Interfaces\/TextChannelInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface"},"traits":[],"source":null,"properties":[],"methods":{"collectMessages":{"name":"collectMessages","line":40,"short_desc":"Collects messages during a specific duration (and max. amount). Resolves with a Collection of Message instances, mapped by their IDs.","long_desc":"Options are as following (all are optional):\n\n```\narray(\n  'max' => int, (max. messages to collect)\n  'time' => int, (duration, in seconds, default 30)\n  'errors' => array, (optional, which failed \"conditions\" (max not reached in time (\"time\")) lead to a rejected promise, defaults to [])\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"This promise is cancellable.","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Message"],["\\CharlotteDunois\\Yasmin\\Utils\\Collector"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\RangeException","The exception the promise gets rejected with, if waiting times out."],["\\OutOfBoundsException","The exception the promise gets rejected with, if the promise gets cancelled."]],"errors":[],"example":null,"source":null,"parameters":{"filter":{"name":"filter","line":40,"short_desc":"","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":40,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"fetchMessage":{"name":"fetchMessage","line":48,"short_desc":"Fetches a specific message using the ID. Resolves with an instance of Message.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Message"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"id":{"name":"id","line":48,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"fetchMessages":{"name":"fetchMessages","line":68,"short_desc":"Fetches messages of this channel. Resolves with a Collection of Message instances, mapped by their ID.","long_desc":"Options are as following:\n\n```\narray(\n  'after' => string, (message ID)\n  'around' => string, (message ID)\n  'before' => string, (message ID)\n  'limit' => int, (1-100, defaults to 50)\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Message"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":68,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"getLastMessageID":{"name":"getLastMessageID","line":18,"short_desc":"Gets the ID of the last sent message in this channel.","long_desc":null,"hint":[["string",null]],"hint_desc":null,"tags":[],"modifiers":null,"is_by_ref":null,"exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getMessages":{"name":"getMessages","line":18,"short_desc":"Gets the storage with all cached messages.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\MessageStorageInterface",null]],"hint_desc":null,"tags":[],"modifiers":null,"is_by_ref":null,"exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isTyping":{"name":"isTyping","line":124,"short_desc":"Determines whether the given user is typing in this channel or not.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":124,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","User"],"attributes":{"startLine":124,"endLine":124}},"default":null,"variadic":false,"is_by_ref":false}}},"send":{"name":"send","line":98,"short_desc":"Sends a message to a channel. Resolves with an instance of Message, or a Collection of Message instances, mapped by their ID.","long_desc":"Options are as following (all are optional):\n\n```\narray(\n   'embed' => array|\\CharlotteDunois\\Yasmin\\Models\\MessageEmbed, (an (embed) array\/object or an instance of MessageEmbed)\n   'files' => array, (an array of `[ 'name' => string, 'data' => string || 'path' => string ]` or just plain file contents, file paths or URLs)\n   'nonce' => string, (a snowflake used for optimistic sending)\n   'disableEveryone' => bool, (whether @everyone and @here should be replaced with plaintext, defaults to client option disableEveryone)\n   'tts' => bool,\n   'split' => bool|array, (*)\n)\n\n  * array(\n  *   'before' => string, (The string to insert before the split)\n  *   'after' => string, (The string to insert after the split)\n  *   'char' => string, (The string to split on)\n  *   'maxLength' => int, (The max. length of each message)\n  * )\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Message"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"content":{"name":"content","line":98,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":98,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"startTyping":{"name":"startTyping","line":104,"short_desc":"Starts sending the typing indicator in this channel. Counts up a triggered typing counter.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"stopTyping":{"name":"stopTyping","line":111,"short_desc":"Stops sending the typing indicator in this channel. Counts down a triggered typing counter.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"force":{"name":"force","line":111,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false}}},"typingCount":{"name":"typingCount","line":117,"short_desc":"Returns the amount of user typing in this channel.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\UserStorageInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\UserStorageInterface","line":15,"short_desc":"Something all user storages implement. The storage also is used as factory.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/UserStorageInterface.php","relative_file":"\/src\/Interfaces\/UserStorageInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"all":{"name":"all","line":50,"short_desc":"Returns all items.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",true]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"current":{"name":"current","line":20,"short_desc":"Returns the current element. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"get":{"name":"get","line":81,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":81,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":73,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":73,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"key":{"name":"key","line":26,"short_desc":"Fetch the key from the current element. From Iterator interface.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"next":{"name":"next","line":32,"short_desc":"Advances the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"patch":{"name":"patch","line":65,"short_desc":"Patches an user (retrieves the user if the user exists), returns null if only the ID is in the array, or creates an user.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":65,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"resolve":{"name":"resolve","line":58,"short_desc":"Resolves given data to an user.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":58,"short_desc":"string\/int = user ID","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"rewind":{"name":"rewind","line":38,"short_desc":"Resets the internal pointer. From Iterator interface.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["false",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"set":{"name":"set","line":90,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":90,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":90,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"valid":{"name":"valid","line":44,"short_desc":"Checks if current position is valid. From Iterator interface.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\VoiceChannelInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\VoiceChannelInterface","line":15,"short_desc":"Something all voice channels implement.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/VoiceChannelInterface.php","relative_file":"\/src\/Interfaces\/VoiceChannelInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface"},"traits":[],"source":null,"properties":[],"methods":[],"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\WSCompressionInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\WSCompressionInterface","line":15,"short_desc":"Interface for WS compressions. This is used internally.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/WSCompressionInterface.php","relative_file":"\/src\/Interfaces\/WSCompressionInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"decompress":{"name":"decompress","line":54,"short_desc":"Decompresses data.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\CharlotteDunois\\Yasmin\\WebSocket\\DiscordGatewayException",""]],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":54,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"destroy":{"name":"destroy","line":46,"short_desc":"Destroys the context.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getName":{"name":"getName","line":27,"short_desc":"Returns compression name (for gateway query string).","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"init":{"name":"init","line":40,"short_desc":"Initializes the context.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":[]},"isPayloadCompression":{"name":"isPayloadCompression","line":33,"short_desc":"Returns a boolean for the OP code 2 IDENTIFY packet 'compress' parameter. The parameter is for payload compression.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"supported":{"name":"supported","line":21,"short_desc":"Checks if the system supports it.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Interfaces\\WSEncodingInterface":{"name":"CharlotteDunois\\Yasmin\\Interfaces\\WSEncodingInterface","line":15,"short_desc":"Interface for WS encodings. This is used internally.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Interfaces","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Interfaces\/WSEncodingInterface.php","relative_file":"\/src\/Interfaces\/WSEncodingInterface.php","parent":null,"modifiers":null,"is_trait":false,"is_interface":true,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"decode":{"name":"decode","line":35,"short_desc":"Decodes data.","long_desc":"","hint":[["mixed",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\CharlotteDunois\\Yasmin\\WebSocket\\DiscordGatewayException",""]],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":35,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"encode":{"name":"encode","line":43,"short_desc":"Encodes data.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\CharlotteDunois\\Yasmin\\WebSocket\\DiscordGatewayException",""]],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":43,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"getName":{"name":"getName","line":20,"short_desc":"Returns encoding name (for gateway query string).","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"prepareMessage":{"name":"prepareMessage","line":50,"short_desc":"Prepares the data to be sent.","long_desc":"","hint":[["\\Ratchet\\RFC6455\\Messaging\\Message",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":50,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"supported":{"name":"supported","line":27,"short_desc":"Checks if the system supports it.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\Activity":{"name":"CharlotteDunois\\Yasmin\\Models\\Activity","line":31,"short_desc":"Something someone does.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"name","The name of the activity."],[[["int",false]],"type","The activity type."],[[["string",false],["null",false]],"url","The stream url, if streaming."],[[["string",false],["null",false]],"applicationID","The application ID associated with the activity, or null."],[[["\\CharlotteDunois\\Yasmin\\Models\\RichPresenceAssets",false],["null",false]],"assets","Assets for rich presence, or null."],[[["string",false],["null",false]],"details","Details about the activity, or null."],[[["array",false],["null",false]],"party","Party of the activity, an array in the format `[ 'id' => string, 'size' => [ size (int), max (int|null) ]|null ]`, or null."],[[["string",false],["null",false]],"state","State of the activity, or null."],[[["array",false],["null",false]],"timestamps","Timestamps for the activity, an array in the format `[ 'start' => \\DateTime|null, 'end' => \\DateTime|null ]`, or null."],[[["int",false],["null",false]],"flags","The activity flags (as bitfield), like if an activity is a spectate activity."],[[["string",false],["null",false]],"sessionID","The ID that links to the activity session."],[[["string",false],["null",false]],"syncID","The sync ID. For spotify, this is the spotify track ID."],[[["bool",false]],"streaming","Whether or not the activity is being streamed."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/Activity.php","relative_file":"\/src\/Models\/Activity.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"applicationID":{"name":"applicationID","line":31,"short_desc":"The application ID associated with the activity, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"assets":{"name":"assets","line":31,"short_desc":"Assets for rich presence, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\RichPresenceAssets",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"details":{"name":"details","line":31,"short_desc":"Details about the activity, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"flags":{"name":"flags","line":31,"short_desc":"The activity flags (as bitfield), like if an activity is a spectate activity.","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":31,"short_desc":"The name of the activity.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"party":{"name":"party","line":31,"short_desc":"Party of the activity, an array in the format `[ 'id' => string, 'size' => [ size (int), max (int|null) ]|null ]`, or null.","long_desc":null,"hint":[["array",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"sessionID":{"name":"sessionID","line":31,"short_desc":"The ID that links to the activity session.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"state":{"name":"state","line":31,"short_desc":"State of the activity, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"streaming":{"name":"streaming","line":31,"short_desc":"Whether or not the activity is being streamed.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"syncID":{"name":"syncID","line":31,"short_desc":"The sync ID. For spotify, this is the spotify track ID.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"timestamps":{"name":"timestamps","line":31,"short_desc":"Timestamps for the activity, an array in the format `[ 'start' => \\DateTime|null, 'end' => \\DateTime|null ]`, or null.","long_desc":null,"hint":[["array",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"type":{"name":"type","line":31,"short_desc":"The activity type.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"url":{"name":"url","line":31,"short_desc":"The stream url, if streaming.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__construct":{"name":"__construct","line":135,"short_desc":"The manual creation of such a class is discouraged. There may be an easy and safe way to create such a class in the future.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":135,"short_desc":"The client this instance is for.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Client",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Client"],"attributes":{"startLine":135,"endLine":135}},"default":null,"variadic":false,"is_by_ref":false},"activity":{"name":"activity","line":135,"short_desc":"An array containing name, type (as int) and url (nullable).","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"isRichPresence":{"name":"isRichPresence","line":190,"short_desc":"Whether this activity is a rich presence.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":{"FLAGS":{"name":"FLAGS","line":37,"short_desc":"The Activity flags.","long_desc":"","source":["const FLAGS = array(\n    'INSTANCE' => 1,\n    'JOIN' => 2,\n    'SPECTATE' => 4,\n    'JOIN_REQUEST' => 8,\n    'SYNC' => 16,\n    'PLAY' => 32\n);",""]},"TYPES":{"name":"TYPES","line":51,"short_desc":"The Activity types.","long_desc":"","source":["const TYPES = array(\n    0 => 'playing',\n    1 => 'streaming',\n    2 => 'listening',\n    3 => 'watching'\n);",""]}}},"CharlotteDunois\\Yasmin\\Models\\AuditLog":{"name":"CharlotteDunois\\Yasmin\\Models\\AuditLog","line":20,"short_desc":"Represents a guild audit log.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"guild","Which guild this audit log is for."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"entries","Holds the entries, mapped by their ID."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"users","Holds the found users in the audit log, mapped by their ID."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"webhooks","Holds the found webhooks in the audit log, mapped by their ID."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/AuditLog.php","relative_file":"\/src\/Models\/AuditLog.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"entries":{"name":"entries","line":20,"short_desc":"Holds the entries, mapped by their ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guild":{"name":"guild","line":20,"short_desc":"Which guild this audit log is for.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"users":{"name":"users","line":20,"short_desc":"Holds the found users in the audit log, mapped by their ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"webhooks":{"name":"webhooks","line":20,"short_desc":"Holds the found webhooks in the audit log, mapped by their ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":[],"constants":[]},"CharlotteDunois\\Yasmin\\Models\\AuditLogEntry":{"name":"CharlotteDunois\\Yasmin\\Models\\AuditLogEntry","line":28,"short_desc":"Represents a guild audit log entry.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Yasmin\\Models\\AuditLog",false]],"log","The guild audit log which this entry belongs to."],[[["string",false]],"id","The ID of the audit log."],[[["array",true]],"changes","Specific property changes."],[[["string",false]],"userID","The ID of the user which triggered the audit log."],[[["string",false]],"actionType","Specific action type of this entry in its string presentation."],[[["string",false],["null",false]],"reason","The specified reason, or null."],[[["int",false]],"createdTimestamp","When this audit log entry was created."],[[["mixed",false],["null",false]],"extra","Any extra data from the entry, or null."],[[["mixed",false],["null",false]],"target","The target of this entry, or null."],[[["\\DateTime",false]],"createdAt","The DateTime instance of createdTimestamp."],[[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"user","The user which triggered the audit log."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/AuditLogEntry.php","relative_file":"\/src\/Models\/AuditLogEntry.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"actionType":{"name":"actionType","line":28,"short_desc":"Specific action type of this entry in its string presentation.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"changes":{"name":"changes","line":28,"short_desc":"Specific property changes.","long_desc":null,"hint":[["array",true]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdAt":{"name":"createdAt","line":28,"short_desc":"The DateTime instance of createdTimestamp.","long_desc":null,"hint":[["\\DateTime",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":28,"short_desc":"When this audit log entry was created.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"extra":{"name":"extra","line":28,"short_desc":"Any extra data from the entry, or null.","long_desc":null,"hint":[["mixed",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":28,"short_desc":"The ID of the audit log.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"log":{"name":"log","line":28,"short_desc":"The guild audit log which this entry belongs to.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\AuditLog",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"reason":{"name":"reason","line":28,"short_desc":"The specified reason, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"target":{"name":"target","line":28,"short_desc":"The target of this entry, or null.","long_desc":null,"hint":[["mixed",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"user":{"name":"user","line":28,"short_desc":"The user which triggered the audit log.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"userID":{"name":"userID","line":28,"short_desc":"The ID of the user which triggered the audit log.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"getActionType":{"name":"getActionType","line":234,"short_desc":"Finds the action type from the entry action.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"actionType":{"name":"actionType","line":234,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false}}},"getTargetType":{"name":"getTargetType","line":285,"short_desc":"Finds the target type from the entry action.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\AuditLogEntry::TARGET_TYPES"]]},"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"target":{"name":"target","line":285,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false}}}},"constants":{"ACTION_TYPES":{"name":"ACTION_TYPES","line":34,"short_desc":"All available actions keyed under their names to their numeric values.","long_desc":"","source":["const ACTION_TYPES = array(\n    'ALL' => null,\n    'GUILD_UPDATE' => 1,\n    'CHANNEL_UPDATE' => 11,\n    'CHANNEL_CREATE' => 10,\n    'CHANNEL_OVERWRITE_CREATE' => 13,\n    'CHANNEL_DELETE' => 12,\n    'CHANNEL_OVERWRITE_UPDATE' => 14,\n    'CHANNEL_OVERWRITE_DELETE' => 15,\n    'MEMBER_KICK' => 20,\n    'MEMBER_PRUNE' => 21,\n    'MEMBER_BAN_ADD' => 22,\n    'MEMBER_BAN_REMOVE' => 23,\n    'MEMBER_UPDATE' => 24,\n    'MEMBER_ROLE_UPDATE' => 25,\n    'ROLE_CREATE' => 30,\n    'ROLE_UPDATE' => 31,\n    'ROLE_DELETE' => 32,\n    'INVITE_CREATE' => 40,\n    'INVITE_UPDATE' => 41,\n    'INVITE_DELETE' => 42,\n    'WEBHOOK_CREATE' => 50,\n    'WEBHOOK_UPDATE' => 51,\n    'WEBHOOK_DELETE' => 52,\n    'EMOJI_CREATE' => 60,\n    'EMOJI_UPDATE' => 61,\n    'EMOJI_DELETE' => 62,\n    'MESSAGE_DELETE' => 72\n);",""]}}},"CharlotteDunois\\Yasmin\\Models\\Base":{"name":"CharlotteDunois\\Yasmin\\Models\\Base","line":15,"short_desc":"Something all Models extend.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/Base.php","relative_file":"\/src\/Models\/Base.php","parent":null,"modifiers":16,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"JsonSerializable":"JsonSerializable","Serializable":"Serializable"},"traits":[],"source":null,"properties":[],"methods":[],"constants":[]},"CharlotteDunois\\Yasmin\\Models\\CategoryChannel":{"name":"CharlotteDunois\\Yasmin\\Models\\CategoryChannel","line":24,"short_desc":"Represents a guild's category channel.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The ID of the channel."],[[["string",false]],"name","The channel name."],[[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"guild","The guild this category channel belongs to."],[[["int",false]],"createdTimestamp","The timestamp of when this channel was created."],[[["int",false]],"position","The channel position."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"permissionOverwrites","A collection of PermissionOverwrite instances."],[[["\\DateTime",false]],"createdAt","The DateTime instance of createdTimestamp."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/CategoryChannel.php","relative_file":"\/src\/Models\/CategoryChannel.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\CategoryChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\CategoryChannelInterface"},"traits":{"CharlotteDunois\\Yasmin\\Traits\\GuildChannelTrait":"CharlotteDunois\\Yasmin\\Traits\\GuildChannelTrait"},"source":null,"properties":{"createdAt":{"name":"createdAt","line":24,"short_desc":"The DateTime instance of createdTimestamp.","long_desc":null,"hint":[["\\DateTime",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":24,"short_desc":"The timestamp of when this channel was created.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guild":{"name":"guild","line":24,"short_desc":"The guild this category channel belongs to.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":24,"short_desc":"The ID of the channel.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":24,"short_desc":"The channel name.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"permissionOverwrites":{"name":"permissionOverwrites","line":24,"short_desc":"A collection of PermissionOverwrite instances.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"position":{"name":"position","line":24,"short_desc":"The channel position.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"getChildren":{"name":"getChildren","line":101,"short_desc":"Returns all channels which are childrens of this category.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\ChannelStorage":{"name":"CharlotteDunois\\Yasmin\\Models\\ChannelStorage","line":15,"short_desc":"Channel Storage to store channels, which utilizes Collection.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/ChannelStorage.php","relative_file":"\/src\/Models\/ChannelStorage.php","parent":"CharlotteDunois\\Yasmin\\Models\\Storage","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\ChannelStorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\ChannelStorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"clear":{"name":"clear","line":112,"short_desc":"Clears the Storage.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"delete":{"name":"delete","line":99,"short_desc":"Removes an item.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":99,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"get":{"name":"get","line":75,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":75,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"getTypeForChannel":{"name":"getTypeForChannel","line":197,"short_desc":"Get the type for the channel.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":197,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Interfaces","ChannelInterface"],"attributes":{"startLine":197,"endLine":197}},"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":66,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":66,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"resolve":{"name":"resolve","line":45,"short_desc":"Resolves given data to a channel.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":45,"short_desc":"string\/int = channel ID","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false],["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"set":{"name":"set","line":85,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":85,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":85,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelInterface",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":{"CHANNEL_TYPES":{"name":"CHANNEL_TYPES","line":21,"short_desc":"Channel Types.","long_desc":"","source":["const CHANNEL_TYPES = array(\n    0 => 'text',\n    1 => 'dm',\n    2 => 'voice',\n    3 => 'group',\n    4 => 'category',\n    5 => 'news',\n    6 => 'store',\n    \n    'text' => 0,\n    'dm' => 1,\n    'voice' => 2,\n    'group' => 3,\n    'category' => 4,\n    'news' => 5,\n    'store' => 6\n);",""]}}},"CharlotteDunois\\Yasmin\\Models\\ClientBase":{"name":"CharlotteDunois\\Yasmin\\Models\\ClientBase","line":17,"short_desc":"Something all Models, with the need for a client, extend.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Yasmin\\Client",false]],"client","The client which initiated the instance."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/ClientBase.php","relative_file":"\/src\/Models\/ClientBase.php","parent":"CharlotteDunois\\Yasmin\\Models\\Base","modifiers":16,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"client":{"name":"client","line":17,"short_desc":"The client which initiated the instance.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Client",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"serializeClient":{"name":"serializeClient","line":28,"short_desc":"The client which will be used to unserialize.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Client",false],["null",false]],"hint_desc":"","tags":[],"modifiers":9,"default":null,"errors":[],"source":null}},"methods":[],"constants":[]},"CharlotteDunois\\Yasmin\\Models\\ClientStatus":{"name":"CharlotteDunois\\Yasmin\\Models\\ClientStatus","line":19,"short_desc":"Represents an user's client status.","long_desc":"","hint":null,"tags":{"property":[[[["string",false],["null",false]],"desktop","The status of the user on the desktop client."],[[["string",false],["null",false]],"mobile","The status of the user on the mobile client."],[[["string",false],["null",false]],"web","The status of the user on the web client."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/ClientStatus.php","relative_file":"\/src\/Models\/ClientStatus.php","parent":"CharlotteDunois\\Yasmin\\Models\\Base","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"desktop":{"name":"desktop","line":19,"short_desc":"The status of the user on the desktop client.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"mobile":{"name":"mobile","line":19,"short_desc":"The status of the user on the mobile client.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"web":{"name":"web","line":19,"short_desc":"The status of the user on the web client.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":[],"constants":{"STATUS_DND":{"name":"STATUS_DND","line":32,"short_desc":"Client status: do not disturb.","long_desc":"","source":["const STATUS_DND = 'dnd';",""]},"STATUS_IDLE":{"name":"STATUS_IDLE","line":39,"short_desc":"Client status: idle.","long_desc":"","source":["const STATUS_IDLE = 'idle';",""]},"STATUS_OFFLINE":{"name":"STATUS_OFFLINE","line":46,"short_desc":"Client status: offline.","long_desc":"","source":["CONST STATUS_OFFLINE = 'offline';",""]},"STATUS_ONLINE":{"name":"STATUS_ONLINE","line":25,"short_desc":"Client status: online.","long_desc":"","source":["const STATUS_ONLINE = 'online';",""]}}},"CharlotteDunois\\Yasmin\\Models\\ClientUser":{"name":"CharlotteDunois\\Yasmin\\Models\\ClientUser","line":15,"short_desc":"Represents the Client User.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/ClientUser.php","relative_file":"\/src\/Models\/ClientUser.php","parent":"CharlotteDunois\\Yasmin\\Models\\User","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"createGroupDM":{"name":"createGroupDM","line":253,"short_desc":"Creates a new Group DM with the owner of the access tokens. Resolves with an instance of GroupDMChannel. The structure of the array is as following:","long_desc":"```\narray(\n   accessToken => \\CharlotteDunois\\Yasmin\\Models\\User|string (user ID)\n)\n```\n\nThe nicks array is an associative array of userID => nick. The nick defaults to the username.","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\GroupDMChannel"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"userWithAccessTokens":{"name":"userWithAccessTokens","line":253,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"nicks":{"name":"nicks","line":253,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"setActivity":{"name":"setActivity","line":109,"short_desc":"Set your activity. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":109,"short_desc":"The activity name.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Activity",false],["string",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"type":{"name":"type","line":109,"short_desc":"Optional if first argument is an Activity. The type of your activity. Should be listening (2) or watching (3). For playing\/streaming use ClientUser::setGame.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"0","variadic":false,"is_by_ref":false},"shardID":{"name":"shardID","line":109,"short_desc":"Unless explicitely given, all presences will be fanned out to all shards.","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":109,"endLine":109}},"default":"null","variadic":false,"is_by_ref":false}}},"setAvatar":{"name":"setAvatar","line":70,"short_desc":"Set your avatar. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"example":[["..\/..\/examples\/docs-examples.php",15,null,"4"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":"\/\/ In\/After ready event\n$client->user->setAvatar(__DIR__.'\/resources\/avatar.png');\n$client->user->setAvatar('https:\/\/my.resources.online\/resources\/avatar.png');\n$client->user->setAvatar(file_get_contents(__DIR__.'\/resources\/avatar.png'));","source":null,"parameters":{"avatar":{"name":"avatar","line":70,"short_desc":"An URL or the filepath or the data. Null resets your avatar.","long_desc":null,"hint":[["string",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"string","attributes":{"startLine":70,"endLine":70}},"default":null,"variadic":false,"is_by_ref":false}}},"setGame":{"name":"setGame","line":139,"short_desc":"Set your playing game. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"example":[["..\/..\/examples\/docs-examples.php",21,null,"2"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":"\/\/ In\/After ready event\n$client->user->setGame('Yasmin');","source":null,"parameters":{"name":{"name":"name","line":139,"short_desc":"The game name.","long_desc":null,"hint":[["string",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"string","attributes":{"startLine":139,"endLine":139}},"default":null,"variadic":false,"is_by_ref":false},"url":{"name":"url","line":139,"short_desc":"If you're streaming, this is the url to the stream.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false},"shardID":{"name":"shardID","line":139,"short_desc":"Unless explicitely given, all presences will be fanned out to all shards.","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":139,"endLine":139}},"default":"null","variadic":false,"is_by_ref":false}}},"setPresence":{"name":"setPresence","line":185,"short_desc":"Set your presence. Ratelimit is 5\/60s, the gateway drops all further presence updates. Resolves with $this.","long_desc":"```\narray(\n    'afk' => bool,\n    'since' => int|null,\n    'status' => string,\n    'game' => array(\n        'name' => string,\n        'type' => int,\n        'url' => string|null\n    )|null\n)\n```\n\n Any field in the first dimension is optional and will be automatically filled with the last known value.","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"example":[["..\/..\/examples\/docs-examples.php",29,null,"10"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":"\/\/ In\/After ready event\n$client->user->setPresence(\n    array(\n        'status' => 'idle',\n        'game' => array(\n            'name' => 'Yasmin',\n            'type' => 0\n        )\n    )\n);","source":null,"parameters":{"presence":{"name":"presence","line":185,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"shardID":{"name":"shardID","line":185,"short_desc":"Unless explicitely given, all presences will be fanned out to all shards.","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":185,"endLine":185}},"default":"null","variadic":false,"is_by_ref":false}}},"setStatus":{"name":"setStatus","line":94,"short_desc":"Set your status. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"example":[["..\/..\/examples\/docs-examples.php",25,null,"2"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":"\/\/ In\/After ready event\n$client->user->setStatus('online');","source":null,"parameters":{"status":{"name":"status","line":94,"short_desc":"Valid values are: `online`, `idle`, `dnd` and `invisible`.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"setUsername":{"name":"setUsername","line":229,"short_desc":"Set your username. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"example":[["..\/..\/examples\/docs-examples.php",41,null,"2"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":"\/\/ In\/After ready event\n$client->user->setUsername('My Super New Username');","source":null,"parameters":{"username":{"name":"username","line":229,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\DMChannel":{"name":"CharlotteDunois\\Yasmin\\Models\\DMChannel","line":25,"short_desc":"Represents a classic DM channel.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The channel ID."],[[["int",false]],"createdTimestamp","The timestamp of when this channel was created."],[[["string",false],["null",false]],"ownerID","The owner ID of this channel, or null."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"recipients","The recipients of this channel, mapped by user ID."],[[["string",false],["null",false]],"lastMessageID","The last message ID, or null."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface",false]],"messages","The storage with all cached messages."],[[["\\DateTime",false]],"createdAt","The DateTime instance of createdTimestamp."],[[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"owner","The owner of this channel, or null."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/DMChannel.php","relative_file":"\/src\/Models\/DMChannel.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\DMChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\DMChannelInterface"},"traits":{"CharlotteDunois\\Yasmin\\Traits\\TextChannelTrait":"CharlotteDunois\\Yasmin\\Traits\\TextChannelTrait"},"source":null,"properties":{"createdAt":{"name":"createdAt","line":25,"short_desc":"The DateTime instance of createdTimestamp.","long_desc":null,"hint":[["\\DateTime",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":25,"short_desc":"The timestamp of when this channel was created.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":25,"short_desc":"The channel ID.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"lastMessageID":{"name":"lastMessageID","line":25,"short_desc":"The last message ID, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"messages":{"name":"messages","line":25,"short_desc":"The storage with all cached messages.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"owner":{"name":"owner","line":25,"short_desc":"The owner of this channel, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"ownerID":{"name":"ownerID","line":25,"short_desc":"The owner ID of this channel, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"recipients":{"name":"recipients","line":25,"short_desc":"The recipients of this channel, mapped by user ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"isRecipient":{"name":"isRecipient","line":115,"short_desc":"Determines whether a given user is a recipient of this channel.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":115,"short_desc":"The User instance or user ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\Emoji":{"name":"CharlotteDunois\\Yasmin\\Models\\Emoji","line":29,"short_desc":"Represents an emoji - both custom and unicode emojis.","long_desc":"","hint":null,"tags":{"property":[[[["string",false],["null",false]],"id","The emoji ID, or null for unicode emoji."],[[["string",false]],"name","The emoji name."],[[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"user","The user that created the emoji, or null."],[[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"guild","The guild this emoji belongs to, or null."],[[["int",false],["null",false]],"createdTimestamp","The timestamp of when this emoji was created, or null for unicode emoji."],[[["bool",false]],"animated","Whether this emoji is animated."],[[["bool",false]],"managed","Is the emoji managed?"],[[["bool",false]],"requireColons","Does the emoji require colons?"],[[["\\CharlotteDunois\\Collect\\Collection",false]],"roles","A collection of roles that this emoji is active for (empty if all)."],[[["\\DateTime",false],["null",false]],"createdAt","An DateTime instance of the createdTimestamp, or null for unicode emoji."],[[["string",false]],"identifier","The identifier for the emoji."],[[["int",false],["string",false]],"uid","The used identifier in the system (ID or name, that is)."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/Emoji.php","relative_file":"\/src\/Models\/Emoji.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"animated":{"name":"animated","line":29,"short_desc":"Whether this emoji is animated.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdAt":{"name":"createdAt","line":29,"short_desc":"An DateTime instance of the createdTimestamp, or null for unicode emoji.","long_desc":null,"hint":[["\\DateTime",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":29,"short_desc":"The timestamp of when this emoji was created, or null for unicode emoji.","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guild":{"name":"guild","line":29,"short_desc":"The guild this emoji belongs to, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":29,"short_desc":"The emoji ID, or null for unicode emoji.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"identifier":{"name":"identifier","line":29,"short_desc":"The identifier for the emoji.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"managed":{"name":"managed","line":29,"short_desc":"Is the emoji managed?","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":29,"short_desc":"The emoji name.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"requireColons":{"name":"requireColons","line":29,"short_desc":"Does the emoji require colons?","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"roles":{"name":"roles","line":29,"short_desc":"A collection of roles that this emoji is active for (empty if all).","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"uid":{"name":"uid","line":29,"short_desc":"The used identifier in the system (ID or name, that is).","long_desc":null,"hint":[["int",false],["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"user":{"name":"user","line":29,"short_desc":"The user that created the emoji, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__toString":{"name":"__toString","line":298,"short_desc":"Automatically converts to a mention.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"addRestrictedRole":{"name":"addRestrictedRole","line":133,"short_desc":"Adds a role to the list of roles that can use this emoji. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException","Throws on unicode emojis."]],"errors":[],"example":null,"source":null,"parameters":{"role":{"name":"role","line":133,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"addRestrictedRoles":{"name":"addRestrictedRoles","line":148,"short_desc":"Adds multiple roles to the list of roles that can use this emoji. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException","Throws on unicode emojis."]],"errors":[],"example":null,"source":null,"parameters":{"role":{"name":"role","line":148,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":true,"is_by_ref":false}}},"delete":{"name":"delete","line":209,"short_desc":"Deletes the emoji.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException","Throws on unicode emojis."]],"errors":[],"example":null,"source":null,"parameters":{"reason":{"name":"reason","line":209,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"edit":{"name":"edit","line":177,"short_desc":"Edits the emoji. Resolves with $this.","long_desc":"Options are as following (at least one required):\n\n```\narray(\n  'name' => string,\n  'roles' => array<string|\\CharlotteDunois\\Yasmin\\Models\\Role>|\\CharlotteDunois\\Collect\\Collection<string|\\CharlotteDunois\\Yasmin\\Models\\Role>\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException","Throws on unicode emojis."]],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":177,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":177,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"getImageURL":{"name":"getImageURL","line":226,"short_desc":"Get the image URL of the custom emoji.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException","Throws on unicode emojis."]],"errors":[],"example":null,"source":null,"parameters":[]},"removeRestrictedRole":{"name":"removeRestrictedRole","line":240,"short_desc":"Removes a role from the list of roles that can use this emoji. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException","Throws on unicode emojis."]],"errors":[],"example":null,"source":null,"parameters":{"role":{"name":"role","line":240,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"removeRestrictedRoles":{"name":"removeRestrictedRoles","line":263,"short_desc":"Removes multiple roles from the list of roles that can use this emoji. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException","Throws on unicode emojis."]],"errors":[],"example":null,"source":null,"parameters":{"role":{"name":"role","line":263,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":true,"is_by_ref":false}}},"setName":{"name":"setName","line":290,"short_desc":"Sets the new name of the emoji. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException","Throws on unicode emojis."]],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":290,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":290,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\EmojiStorage":{"name":"CharlotteDunois\\Yasmin\\Models\\EmojiStorage","line":15,"short_desc":"Emoji Storage to store emojis, utilizes Collection.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/EmojiStorage.php","relative_file":"\/src\/Models\/EmojiStorage.php","parent":"CharlotteDunois\\Yasmin\\Models\\Storage","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\EmojiStorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\EmojiStorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"delete":{"name":"delete","line":96,"short_desc":"Removes an item.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":96,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"get":{"name":"get","line":72,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":72,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":63,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":63,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"resolve":{"name":"resolve","line":38,"short_desc":"Resolves given data to an emoji.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"emoji":{"name":"emoji","line":38,"short_desc":"string\/int = emoji ID","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",false],["\\CharlotteDunois\\Yasmin\\Models\\MessageReaction",false],["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"set":{"name":"set","line":82,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":82,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":82,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\GroupDMChannel":{"name":"CharlotteDunois\\Yasmin\\Models\\GroupDMChannel","line":18,"short_desc":"Represents a Group DM channel.","long_desc":"","hint":null,"tags":{"property":[[[["string",false],["null",false]],"applicationID","The application which created the group DM channel."],[[["string",false],["null",false]],"icon","The icon of the Group DM channel."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/GroupDMChannel.php","relative_file":"\/src\/Models\/GroupDMChannel.php","parent":"CharlotteDunois\\Yasmin\\Models\\DMChannel","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\GroupDMChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\GroupDMChannelInterface"},"traits":[],"source":null,"properties":{"applicationID":{"name":"applicationID","line":18,"short_desc":"The application which created the group DM channel.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"icon":{"name":"icon","line":18,"short_desc":"The icon of the Group DM channel.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"addRecipient":{"name":"addRecipient","line":43,"short_desc":"Adds the given user to the Group DM channel using the given access token. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":43,"short_desc":"The User instance, or the user ID.","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"accessToken":{"name":"accessToken","line":43,"short_desc":"The OAuth 2.0 access token for the user.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"nick":{"name":"nick","line":43,"short_desc":"The nickname of the user being added.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"getIconURL":{"name":"getIconURL","line":61,"short_desc":"Returns the group DM's icon URL, or null.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":61,"short_desc":"One of 128, 256, 512, 1024 or 2048.","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":61,"endLine":61}},"default":"null","variadic":false,"is_by_ref":false},"format":{"name":"format","line":61,"short_desc":"One of png, jpg or webp.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"'png'","variadic":false,"is_by_ref":false}}},"removeRecipient":{"name":"removeRecipient","line":75,"short_desc":"Removes the given user from the Group DM channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":75,"short_desc":"The User instance, or the user ID.","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\Guild":{"name":"CharlotteDunois\\Yasmin\\Models\\Guild","line":61,"short_desc":"Represents a guild. It's recommended to see if a guild is available before performing operations or reading data from it.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The guild ID."],[[["int",false]],"shardID","On which shard this guild is."],[[["bool",false]],"available","Whether the guild is available."],[[["string",false]],"name","The guild name."],[[["int",false]],"createdTimestamp","The timestamp when this guild was created."],[[["string",false],["null",false]],"icon","The guild icon hash, or null."],[[["string",false],["null",false]],"splash","The guild splash hash, or null."],[[["string",false]],"ownerID","The ID of the owner."],[[["bool",false]],"large","Whether the guild is considered large."],[[["bool",false]],"lazy","Whether this guild is run in lazy mode (on the Discord node)."],[[["int",false]],"memberCount","How many members the guild has."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelStorageInterface",false]],"channels","Holds a guild's channels, mapped by their ID."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\EmojiStorageInterface",false]],"emojis","Holds a guild's emojis, mapped by their ID."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildMemberStorageInterface",false]],"members","Holds a guild's cached members, mapped by their ID."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\RoleStorageInterface",false]],"roles","Holds a guild's roles, mapped by their ID."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\PresenceStorageInterface",false]],"presences","Holds a guild's presences of members, mapped by user ID."],[[["string",false]],"defaultMessageNotifications","The type of message that should notify you. ({@see Guild::DEFAULT_MESSAGE_NOTIFICATIONS})"],[[["string",false]],"explicitContentFilter","The explicit content filter level of the guild. ({@see Guild::EXPLICIT_CONTENT_FILTER})"],[[["string",false]],"region","The region the guild is located in."],[[["string",false]],"verificationLevel","The verification level of the guild. ({@see Guild::VERIFICATION_LEVEL})"],[[["string",false],["null",false]],"systemChannelID","The ID of the system channel, or null."],[[["string",false],["null",false]],"afkChannelID","The ID of the afk channel, or null."],[[["int",false],["null",false]],"afkTimeout","The time in seconds before an user is counted as \"away from keyboard\"."],[[["string",true]],"features","An array of guild features."],[[["string",false]],"mfaLevel","The required MFA level for the guild. ({@see Guild::MFA_LEVEL})"],[[["string",false],["null",false]],"applicationID","Application ID of the guild creator, if it is bot-created."],[[["bool",false]],"embedEnabled","Whether the guild is embeddable or not (e.g. widget)."],[[["string",false],["null",false]],"embedChannelID","The ID of the embed channel, or null."],[[["bool",false]],"widgetEnabled","Whether the guild widget is enabled or not."],[[["string",false],["null",false]],"widgetChannelID","The ID of the widget channel, or null."],[[["int",false],["null",false]],"maxPresences","The maximum amount of presences the guild can have, or null."],[[["int",false],["null",false]],"maxMembers","The maximum amount of members the guild can have, or null."],[[["string",false],["null",false]],"vanityInviteCode","The vanity invite code, or null."],[[["string",false],["null",false]],"description","Guild description used for Server Discovery, or null."],[[["string",false],["null",false]],"banner","Guild banner hash used for Server Discovery, or null."],[[["\\CharlotteDunois\\Yasmin\\Models\\VoiceChannel",false],["null",false]],"afkChannel","The guild's afk channel, or null."],[[["\\DateTime",false]],"createdAt","The DateTime instance of createdTimestamp."],[[["\\CharlotteDunois\\Yasmin\\Models\\Role",false]],"defaultRole","The guild's default role."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface",false],["null",false]],"embedChannel","The guild's embed channel, or null."],[[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false]],"me","The guild member of the client user."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface",false],["null",false]],"systemChannel","The guild's system channel, or null."],[[["bool",false]],"vanityURL","Whether the guild has a vanity invite url."],[[["bool",false]],"verified","Whether the guild is verified."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface",false],["null",false]],"widgetChannel","The guild's widget channel, or null."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/Guild.php","relative_file":"\/src\/Models\/Guild.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"afkChannel":{"name":"afkChannel","line":61,"short_desc":"The guild's afk channel, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\VoiceChannel",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"afkChannelID":{"name":"afkChannelID","line":61,"short_desc":"The ID of the afk channel, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"afkTimeout":{"name":"afkTimeout","line":61,"short_desc":"The time in seconds before an user is counted as \"away from keyboard\".","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"applicationID":{"name":"applicationID","line":61,"short_desc":"Application ID of the guild creator, if it is bot-created.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"available":{"name":"available","line":61,"short_desc":"Whether the guild is available.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"banner":{"name":"banner","line":61,"short_desc":"Guild banner hash used for Server Discovery, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"channels":{"name":"channels","line":61,"short_desc":"Holds a guild's channels, mapped by their ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\ChannelStorageInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdAt":{"name":"createdAt","line":61,"short_desc":"The DateTime instance of createdTimestamp.","long_desc":null,"hint":[["\\DateTime",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":61,"short_desc":"The timestamp when this guild was created.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"defaultMessageNotifications":{"name":"defaultMessageNotifications","line":61,"short_desc":"The type of message that should notify you. ({@see Guild::DEFAULT_MESSAGE_NOTIFICATIONS})","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"defaultRole":{"name":"defaultRole","line":61,"short_desc":"The guild's default role.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"description":{"name":"description","line":61,"short_desc":"Guild description used for Server Discovery, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"embedChannel":{"name":"embedChannel","line":61,"short_desc":"The guild's embed channel, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"embedChannelID":{"name":"embedChannelID","line":61,"short_desc":"The ID of the embed channel, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"embedEnabled":{"name":"embedEnabled","line":61,"short_desc":"Whether the guild is embeddable or not (e.g. widget).","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"emojis":{"name":"emojis","line":61,"short_desc":"Holds a guild's emojis, mapped by their ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\EmojiStorageInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"explicitContentFilter":{"name":"explicitContentFilter","line":61,"short_desc":"The explicit content filter level of the guild. ({@see Guild::EXPLICIT_CONTENT_FILTER})","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"features":{"name":"features","line":61,"short_desc":"An array of guild features.","long_desc":null,"hint":[["string",true]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"icon":{"name":"icon","line":61,"short_desc":"The guild icon hash, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":61,"short_desc":"The guild ID.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"large":{"name":"large","line":61,"short_desc":"Whether the guild is considered large.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"lazy":{"name":"lazy","line":61,"short_desc":"Whether this guild is run in lazy mode (on the Discord node).","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"maxMembers":{"name":"maxMembers","line":61,"short_desc":"The maximum amount of members the guild can have, or null.","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"maxPresences":{"name":"maxPresences","line":61,"short_desc":"The maximum amount of presences the guild can have, or null.","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"me":{"name":"me","line":61,"short_desc":"The guild member of the client user.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"memberCount":{"name":"memberCount","line":61,"short_desc":"How many members the guild has.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"members":{"name":"members","line":61,"short_desc":"Holds a guild's cached members, mapped by their ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildMemberStorageInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"mfaLevel":{"name":"mfaLevel","line":61,"short_desc":"The required MFA level for the guild. ({@see Guild::MFA_LEVEL})","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":61,"short_desc":"The guild name.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"ownerID":{"name":"ownerID","line":61,"short_desc":"The ID of the owner.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"presences":{"name":"presences","line":61,"short_desc":"Holds a guild's presences of members, mapped by user ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\PresenceStorageInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"region":{"name":"region","line":61,"short_desc":"The region the guild is located in.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"roles":{"name":"roles","line":61,"short_desc":"Holds a guild's roles, mapped by their ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\RoleStorageInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"shardID":{"name":"shardID","line":61,"short_desc":"On which shard this guild is.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"splash":{"name":"splash","line":61,"short_desc":"The guild splash hash, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"systemChannel":{"name":"systemChannel","line":61,"short_desc":"The guild's system channel, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"systemChannelID":{"name":"systemChannelID","line":61,"short_desc":"The ID of the system channel, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"vanityInviteCode":{"name":"vanityInviteCode","line":61,"short_desc":"The vanity invite code, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"vanityURL":{"name":"vanityURL","line":61,"short_desc":"Whether the guild has a vanity invite url.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"verificationLevel":{"name":"verificationLevel","line":61,"short_desc":"The verification level of the guild. ({@see Guild::VERIFICATION_LEVEL})","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"verified":{"name":"verified","line":61,"short_desc":"Whether the guild is verified.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"widgetChannel":{"name":"widgetChannel","line":61,"short_desc":"The guild's widget channel, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"widgetChannelID":{"name":"widgetChannelID","line":61,"short_desc":"The ID of the widget channel, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"widgetEnabled":{"name":"widgetEnabled","line":61,"short_desc":"Whether the guild widget is enabled or not.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"addMember":{"name":"addMember","line":412,"short_desc":"Adds the given user to the guild using the OAuth Access Token. Requires the CREATE_INSTANT_INVITE permission. Resolves with $this.","long_desc":"Options are as following (all fields are optional):\n\n```\narray(\n  'nick' => string, (the nickname for the user, requires MANAGE_NICKNAMES permissions)\n  'roles' => array|\\CharlotteDunois\\Collect\\Collection, (array or Collection of Role instances or role IDs, requires MANAGE_ROLES permission)\n  'mute' => bool, (whether the user is muted, requires MUTE_MEMBERS permission)\n  'deaf' => bool, (whether the user is deafened, requires DEAFEN_MEMBERS permission)\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":412,"short_desc":"A guild member or User instance, or the user ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"accessToken":{"name":"accessToken","line":412,"short_desc":"The OAuth Access Token for the given user.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":412,"short_desc":"Any options.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"ban":{"name":"ban","line":461,"short_desc":"Bans the given user. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":461,"short_desc":"A guild member or User instance, or the user ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["\\CharlotteDunois\\Yasmin\\Models\\User",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"days":{"name":"days","line":461,"short_desc":"Number of days of messages to delete (0-7).","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"0","variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":461,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"createChannel":{"name":"createChannel","line":506,"short_desc":"Creates a new channel in the guild. Resolves with an instance of GuildChannelInterface.","long_desc":"Options are as following (all fields except name are optional):\n\n```\narray(\n  'name' => string,\n  'type' => 'category'|'text'|'voice', (defaults to 'text')\n  'topic' => string, (only for text channels)\n  'position' => int,\n  'bitrate' => int, (only for voice channels)\n  'userLimit' => int, (only for voice channels, 0 = unlimited)\n  'slowmode' => int, (only for text channels)\n  'permissionOverwrites' => \\CharlotteDunois\\Collect\\Collection|array, (an array or Collection of PermissionOverwrite instances or permission overwrite arrays*)\n  'parent' => \\CharlotteDunois\\Yasmin\\Models\\CategoryChannel|string, (string = channel ID)\n  'nsfw' => bool (only for text channels)\n)\n\n  *  array(\n  *      'id' => string, (an user\/member or role ID)\n  *      'type' => 'member'|'role',\n  *      'allow' => \\CharlotteDunois\\Yasmin\\Models\\Permissions|int,\n  *      'deny' => \\CharlotteDunois\\Yasmin\\Models\\Permissions|int\n  *  )\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":506,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":506,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"createEmoji":{"name":"createEmoji","line":555,"short_desc":"Creates a new custom emoji in the guild. Resolves with an instance of Emoji.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"file":{"name":"file","line":555,"short_desc":"Filepath or URL, or file data.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"name":{"name":"name","line":555,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"roles":{"name":"roles","line":555,"short_desc":"An array or Collection of Role instances or role IDs.","long_desc":null,"hint":[["array",false],["\\CharlotteDunois\\Collect\\Collection",false]],"tags":[],"modifiers":null,"default":"array()","variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":555,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"createRole":{"name":"createRole","line":605,"short_desc":"Creates a new role in the guild. Resolves with an instance of Role.","long_desc":"Options are as following (all are optional):\n\n```\narray(\n  'name' => string,\n  'permissions' => int|\\CharlotteDunois\\Yasmin\\Models\\Permissions,\n  'color' => int|string,\n  'hoist' => bool,\n  'mentionable' => bool\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Role"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":605,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":605,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"delete":{"name":"delete","line":622,"short_desc":"Deletes the guild.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"edit":{"name":"edit","line":656,"short_desc":"Edits the guild. Resolves with $this.","long_desc":"Options are as following (at least one is required):\n\n```\narray(\n  'name' => string,\n  'region' => string,\n  'verificationLevel' => int,\n  'explicitContentFilter' => int,\n  'defaultMessageNotifications' => int,\n  'afkChannel' => string|\\CharlotteDunois\\Yasmin\\Models\\VoiceChannel|null,\n  'afkTimeout' => int|null,\n  'systemChannel' => string|\\CharlotteDunois\\Yasmin\\Models\\TextChannel|null,\n  'owner' => string|\\CharlotteDunois\\Yasmin\\Models\\GuildMember,\n  'icon' => string, (file path or URL, or data)\n  'splash' => string, (file path or URL, or data)\n  'region' => string|\\CharlotteDunois\\Yasmin\\Models\\VoiceRegion\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":656,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":656,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"fetchAuditLog":{"name":"fetchAuditLog","line":722,"short_desc":"Fetch audit log for the guild. Resolves with an instance of AuditLog.","long_desc":"Options are as following (all are optional):\n\n```\narray(\n  'before' => string|\\CharlotteDunois\\Yasmin\\Models\\AuditLogEntry, (string = Audit Log Entry ID)\n  'after' => string|\\CharlotteDunois\\Yasmin\\Models\\AuditLogEntry, (string = Audit Log Entry ID)\n  'limit' => int,\n  'user' => string|\\CharlotteDunois\\Yasmin\\Models\\User,\n  'type' => string|int\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\AuditLog"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":722,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"fetchBan":{"name":"fetchBan","line":741,"short_desc":"Fetches a specific ban for a user. Resolves with an instance of GuildBan.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\GuildBan"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":741,"short_desc":"An User instance or the user ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"fetchBans":{"name":"fetchBans","line":761,"short_desc":"Fetch all bans of the guild. Resolves with a Collection of GuildBan instances, mapped by the user ID.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\GuildBan"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"fetchInvites":{"name":"fetchInvites","line":783,"short_desc":"Fetches all invites of the guild. Resolves with a Collection of Invite instances, mapped by their code.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Invite"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"fetchMember":{"name":"fetchMember","line":804,"short_desc":"Fetches a specific guild member. Resolves with an instance of GuildMember.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"userid":{"name":"userid","line":804,"short_desc":"The ID of the guild member.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"fetchMembers":{"name":"fetchMembers","line":823,"short_desc":"Fetches all guild members. If `$query` is used, `$limit` must be set to a non-zero integer. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"query":{"name":"query","line":823,"short_desc":"Limit fetch to members with similar usernames.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false},"limit":{"name":"limit","line":823,"short_desc":"Maximum number of members to request.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"0","variadic":false,"is_by_ref":false}}},"fetchPruneMembers":{"name":"fetchPruneMembers","line":899,"short_desc":"Fetches the amount of members from the guild based on how long they have been inactive which would be pruned. Resolves with an integer.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"days":{"name":"days","line":899,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false}}},"fetchVanityInvite":{"name":"fetchVanityInvite","line":912,"short_desc":"Returns the vanity invite. The guild must be partnered, i.e. have 'VANITY_URL' in guild features. Resolves with an instance of Invite.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Invite"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"fetchVoiceRegions":{"name":"fetchVoiceRegions","line":935,"short_desc":"Fetches the guild voice regions. Resolves with a Collection of Voice Region instances, mapped by their ID.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\VoiceRegion"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"fetchWebhooks":{"name":"fetchWebhooks","line":955,"short_desc":"Fetches the guild's webhooks. Resolves with a Collection of Webhook instances, mapped by their ID.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Webhook"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getBannerURL":{"name":"getBannerURL","line":977,"short_desc":"Returns the guild's banner URL, or null.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException","Thrown if $size is not a power of 2"]],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":977,"short_desc":"One of 128, 256, 512, 1024 or 2048.","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":977,"endLine":977}},"default":"null","variadic":false,"is_by_ref":false},"format":{"name":"format","line":977,"short_desc":"One of png, jpg or webp.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"'png'","variadic":false,"is_by_ref":false}}},"getIconURL":{"name":"getIconURL","line":996,"short_desc":"Returns the guild's icon URL, or null.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException","Thrown if $size is not a power of 2"]],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":996,"short_desc":"One of 128, 256, 512, 1024 or 2048.","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":996,"endLine":996}},"default":"null","variadic":false,"is_by_ref":false},"format":{"name":"format","line":996,"short_desc":"One of png, jpg or webp.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"getNameAcronym":{"name":"getNameAcronym","line":1016,"short_desc":"Returns the guild's name acronym.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getSplashURL":{"name":"getSplashURL","line":1033,"short_desc":"Returns the guild's splash URL, or null.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":1033,"short_desc":"One of 128, 256, 512, 1024 or 2048.","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":1033,"endLine":1033}},"default":"null","variadic":false,"is_by_ref":false},"format":{"name":"format","line":1033,"short_desc":"One of png, jpg or webp.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"'png'","variadic":false,"is_by_ref":false}}},"leave":{"name":"leave","line":1049,"short_desc":"Leaves the guild.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"pruneMembers":{"name":"pruneMembers","line":1064,"short_desc":"Prunes members from the guild based on how long they have been inactive. Resolves with an integer or null.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"days":{"name":"days","line":1064,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false},"withCount":{"name":"withCount","line":1064,"short_desc":"Whether the amount of pruned members is returned, discouraged for large guilds.","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":1064,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setAFKChannel":{"name":"setAFKChannel","line":1078,"short_desc":"Edits the AFK channel of the guild. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":1078,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\VoiceChannel",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":1078,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setAFKTimeout":{"name":"setAFKTimeout","line":1088,"short_desc":"Edits the AFK timeout of the guild. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"timeout":{"name":"timeout","line":1088,"short_desc":"","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":1088,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setChannelPositions":{"name":"setChannelPositions","line":1098,"short_desc":"Batch-updates the guild's channels positions. Channels is an array of `channel ID (string)|GuildChannelInterface => position (int)` pairs. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"channels":{"name":"channels","line":1098,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":1098,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setExplicitContentFilter":{"name":"setExplicitContentFilter","line":1146,"short_desc":"Edits the level of the explicit content filter. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"filter":{"name":"filter","line":1146,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":1146,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setIcon":{"name":"setIcon","line":1156,"short_desc":"Updates the guild icon. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"icon":{"name":"icon","line":1156,"short_desc":"A filepath or URL, or data.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":1156,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setName":{"name":"setName","line":1166,"short_desc":"Edits the name of the guild. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":1166,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":1166,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setOwner":{"name":"setOwner","line":1176,"short_desc":"Sets a new owner for the guild. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"owner":{"name":"owner","line":1176,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":1176,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setRegion":{"name":"setRegion","line":1186,"short_desc":"Edits the region of the guild. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"region":{"name":"region","line":1186,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\VoiceRegion",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":1186,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setRolePositions":{"name":"setRolePositions","line":1122,"short_desc":"Batch-updates the guild's roles positions. Roles is an array of `role ID (string)|Role => position (int)` pairs. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"roles":{"name":"roles","line":1122,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":1122,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setSplash":{"name":"setSplash","line":1196,"short_desc":"Updates the guild splash. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"splash":{"name":"splash","line":1196,"short_desc":"A filepath or URL, or data.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":1196,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setSystemChannel":{"name":"setSystemChannel","line":1206,"short_desc":"Edits the system channel of the guild. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":1206,"short_desc":"","long_desc":null,"hint":[["string",false],["\\CharlotteDunois\\Yasmin\\Models\\TextChannel",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":1206,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setVerificationLevel":{"name":"setVerificationLevel","line":1216,"short_desc":"Edits the verification level of the guild. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"level":{"name":"level","line":1216,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":1216,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"unban":{"name":"unban","line":1226,"short_desc":"Unbans the given user. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":1226,"short_desc":"An User instance or the user ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":1226,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":{"DEFAULT_MESSAGE_NOTIFICATIONS":{"name":"DEFAULT_MESSAGE_NOTIFICATIONS","line":67,"short_desc":"Guild default message notifications.","long_desc":"","source":["const DEFAULT_MESSAGE_NOTIFICATIONS = array(\n    0 => 'EVERYTHING',\n    1 => 'ONLY_MENTIONS'\n);",""]},"EXPLICIT_CONTENT_FILTER":{"name":"EXPLICIT_CONTENT_FILTER","line":77,"short_desc":"Guild explicit content filter.","long_desc":"","source":["const EXPLICIT_CONTENT_FILTER = array(\n    0 => 'DISABLED',\n    1 => 'MEMBERS_WITHOUT_ROLES',\n    2 => 'ALL_MEMBERS'\n);",""]},"MFA_LEVEL":{"name":"MFA_LEVEL","line":88,"short_desc":"Guild MFA level.","long_desc":"","source":["const MFA_LEVEL = array(\n    0 => 'NONE',\n    1 => 'ELEVATED'\n);",""]},"VERIFICATION_LEVEL":{"name":"VERIFICATION_LEVEL","line":98,"short_desc":"Guild verification level.","long_desc":"","source":["const VERIFICATION_LEVEL = array(\n    0 => 'NONE',\n    1 => 'LOW',\n    2 => 'MEDIUM',\n    3 => 'HIGH',\n    4 => 'VERY_HIGH'\n);",""]}}},"CharlotteDunois\\Yasmin\\Models\\GuildBan":{"name":"CharlotteDunois\\Yasmin\\Models\\GuildBan","line":19,"short_desc":"Represents a guild ban.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"guild","The guild this ban is from."],[[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"user","The banned user."],[[["string",false],["null",false]],"reason","The ban reason, or null."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/GuildBan.php","relative_file":"\/src\/Models\/GuildBan.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"guild":{"name":"guild","line":19,"short_desc":"The guild this ban is from.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"reason":{"name":"reason","line":19,"short_desc":"The ban reason, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"user":{"name":"user","line":19,"short_desc":"The banned user.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"unban":{"name":"unban","line":68,"short_desc":"Unbans the user.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"reason":{"name":"reason","line":68,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\GuildMember":{"name":"CharlotteDunois\\Yasmin\\Models\\GuildMember","line":35,"short_desc":"Represents a guild member.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The ID of the member."],[[["string",false],["null",false]],"nickname","The nickname of the member, or null."],[[["bool",false]],"deaf","Whether the member is server deafened."],[[["bool",false]],"mute","Whether the member is server muted."],[[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"guild","The guild this member belongs to."],[[["int",false]],"joinedTimestamp","The timestamp of when this member joined."],[[["bool",false]],"selfDeaf","Whether the member is locally deafened."],[[["bool",false]],"selfMute","Whether the member is locally muted."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"roles","A Collection of all roles the member has, mapped by their ID. ({@see \\CharlotteDunois\\Yasmin\\Models\\Role})"],[[["bool",false]],"suppress","Whether you suppress the member."],[[["string",false],["null",false]],"voiceChannelID","The ID of the voice channel the member is in, or null."],[[["string",false]],"voiceSessionID","The voice session ID, or null."],[[["string",false]],"displayName","The displayed name."],[[["\\DateTime",false]],"joinedAt","An DateTime instance of joinedTimestamp."],[[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false]],"permissions","The permissions of the member, only taking roles into account."],[[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false],["null",false]],"presence","The presence of the member in this guild, or null."],[[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"user","The User instance of the member. This should never be null, unless you fuck up."],[[["\\CharlotteDunois\\Yasmin\\Models\\VoiceChannel",false],["null",false]],"voiceChannel","The voice channel the member is in, if connected to voice, or null."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/GuildMember.php","relative_file":"\/src\/Models\/GuildMember.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"deaf":{"name":"deaf","line":35,"short_desc":"Whether the member is server deafened.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"displayName":{"name":"displayName","line":35,"short_desc":"The displayed name.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guild":{"name":"guild","line":35,"short_desc":"The guild this member belongs to.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":35,"short_desc":"The ID of the member.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"joinedAt":{"name":"joinedAt","line":35,"short_desc":"An DateTime instance of joinedTimestamp.","long_desc":null,"hint":[["\\DateTime",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"joinedTimestamp":{"name":"joinedTimestamp","line":35,"short_desc":"The timestamp of when this member joined.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"mute":{"name":"mute","line":35,"short_desc":"Whether the member is server muted.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"nickname":{"name":"nickname","line":35,"short_desc":"The nickname of the member, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"permissions":{"name":"permissions","line":35,"short_desc":"The permissions of the member, only taking roles into account.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"presence":{"name":"presence","line":35,"short_desc":"The presence of the member in this guild, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"roles":{"name":"roles","line":35,"short_desc":"A Collection of all roles the member has, mapped by their ID. ({@see \\CharlotteDunois\\Yasmin\\Models\\Role})","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"selfDeaf":{"name":"selfDeaf","line":35,"short_desc":"Whether the member is locally deafened.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"selfMute":{"name":"selfMute","line":35,"short_desc":"Whether the member is locally muted.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"suppress":{"name":"suppress","line":35,"short_desc":"Whether you suppress the member.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"user":{"name":"user","line":35,"short_desc":"The User instance of the member. This should never be null, unless you fuck up.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"voiceChannel":{"name":"voiceChannel","line":35,"short_desc":"The voice channel the member is in, if connected to voice, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\VoiceChannel",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"voiceChannelID":{"name":"voiceChannelID","line":35,"short_desc":"The ID of the voice channel the member is in, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"voiceSessionID":{"name":"voiceSessionID","line":35,"short_desc":"The voice session ID, or null.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__toString":{"name":"__toString","line":517,"short_desc":"Automatically converts to a mention.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"addRole":{"name":"addRole","line":174,"short_desc":"Adds a role to the guild member. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"role":{"name":"role","line":174,"short_desc":"A role instance or role ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":174,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"addRoles":{"name":"addRoles","line":192,"short_desc":"Adds roles to the guild member. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"roles":{"name":"roles","line":192,"short_desc":"A collection or array of Role instances or role IDs.","long_desc":null,"hint":[["array",false],["\\CharlotteDunois\\Collect\\Collection",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":192,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"ban":{"name":"ban","line":207,"short_desc":"Bans the guild member.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"days":{"name":"days","line":207,"short_desc":"Number of days of messages to delete (0-7).","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"0","variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":207,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"edit":{"name":"edit","line":231,"short_desc":"Edits the guild member. Resolves with $this.","long_desc":"Options are as following (only one required):\n\n```\narray(\n  'nick' => string,\n  'roles' => array|\\CharlotteDunois\\Collect\\Collection, (of role instances or role IDs)\n  'deaf' => bool,\n  'mute' => bool,\n  'channel' => \\CharlotteDunois\\Yasmin\\Models\\VoiceChannel|string|null (will move the member to that channel, if member is connected to voice)\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":231,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":231,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"getColorRole":{"name":"getColorRole","line":265,"short_desc":"Gets the role the member is displayed with.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getDisplayColor":{"name":"getDisplayColor","line":287,"short_desc":"Gets the displayed color of the member.","long_desc":"","hint":[["int",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getDisplayHexColor":{"name":"getDisplayHexColor","line":300,"short_desc":"Gets the displayed color of the member as hex string.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getHighestRole":{"name":"getHighestRole","line":313,"short_desc":"Gets the highest role of the member.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getHoistRole":{"name":"getHoistRole","line":327,"short_desc":"Gets the role the member is hoisted with.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isBannable":{"name":"isBannable","line":349,"short_desc":"Whether the member can be banned by the client user.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isKickable":{"name":"isKickable","line":366,"short_desc":"Whether the member can be kicked by the client user.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"kick":{"name":"kick","line":384,"short_desc":"Kicks the guild member.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"reason":{"name":"reason","line":384,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"permissionsIn":{"name":"permissionsIn","line":398,"short_desc":"Returns permissions for a member in a guild channel, taking into account roles and permission overwrites.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":398,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"removeRole":{"name":"removeRole","line":413,"short_desc":"Removes a role from the guild member. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"role":{"name":"role","line":413,"short_desc":"A role instance or role ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":413,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"removeRoles":{"name":"removeRoles","line":431,"short_desc":"Removes roles from the guild member. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"roles":{"name":"roles","line":431,"short_desc":"A collection or array of role instances (or role IDs).","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false],["array",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":431,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setDeaf":{"name":"setDeaf","line":449,"short_desc":"Deafen\/undeafen a guild member. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"deaf":{"name":"deaf","line":449,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":449,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setMute":{"name":"setMute","line":459,"short_desc":"Mute\/unmute a guild member. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"mute":{"name":"mute","line":459,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":459,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setNickname":{"name":"setNickname","line":469,"short_desc":"Set the nickname of the guild member. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"nickname":{"name":"nickname","line":469,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":469,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setRoles":{"name":"setRoles","line":487,"short_desc":"Sets the roles of the guild member. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"roles":{"name":"roles","line":487,"short_desc":"A collection or array of role instances (or role IDs).","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false],["\\CharlotteDunois\\Yasmin\\Models\\array<\\CharlotteDunois\\Yasmin\\Models\\Role>",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":487,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setVoiceChannel":{"name":"setVoiceChannel","line":500,"short_desc":"Moves the guild member to the given voice channel, if connected to voice. Resolves with $this.","long_desc":"If the member is connected to a voice channel and the new channel is null,\nthen the member will be disconnected.","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"channel":{"name":"channel","line":500,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\VoiceChannel",false],["string",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":500,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\GuildMemberStorage":{"name":"CharlotteDunois\\Yasmin\\Models\\GuildMemberStorage","line":15,"short_desc":"Guild Member Storage to store guild members, utilizes Collection.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/GuildMemberStorage.php","relative_file":"\/src\/Models\/GuildMemberStorage.php","parent":"CharlotteDunois\\Yasmin\\Models\\Storage","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\GuildMemberStorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\GuildMemberStorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"delete":{"name":"delete","line":92,"short_desc":"Removes an item.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":92,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"get":{"name":"get","line":72,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":72,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":63,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":63,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"resolve":{"name":"resolve","line":38,"short_desc":"Resolves given data to a guildmember.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guildmember":{"name":"guildmember","line":38,"short_desc":"string\/int = user ID","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["\\CharlotteDunois\\Yasmin\\Models\\User",false],["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"set":{"name":"set","line":82,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":82,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":82,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\GuildStorage":{"name":"CharlotteDunois\\Yasmin\\Models\\GuildStorage","line":15,"short_desc":"Guild Storage to store guilds, utilizes Collection.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/GuildStorage.php","relative_file":"\/src\/Models\/GuildStorage.php","parent":"CharlotteDunois\\Yasmin\\Models\\Storage","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\GuildStorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\GuildStorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"delete":{"name":"delete","line":72,"short_desc":"Removes an item.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":72,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"get":{"name":"get","line":52,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":52,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":43,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":43,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"resolve":{"name":"resolve","line":22,"short_desc":"Resolves given data to a guild.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"guild":{"name":"guild","line":22,"short_desc":"string\/int = guild ID","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"set":{"name":"set","line":62,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":62,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":62,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\GuildStoreChannel":{"name":"CharlotteDunois\\Yasmin\\Models\\GuildStoreChannel","line":27,"short_desc":"Represents a guild's store channel.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The channel ID."],[[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"guild","The associated guild."],[[["int",false]],"createdTimestamp","The timestamp of when this channel was created."],[[["string",false]],"name","The channel name."],[[["bool",false]],"nsfw","Whether the channel is marked as NSFW or not."],[[["string",false],["null",false]],"parentID","The ID of the parent channel, or null."],[[["int",false]],"position","The channel position."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"permissionOverwrites","A collection of PermissionOverwrite instances, mapped by their ID."],[[["\\DateTime",false]],"createdAt","The DateTime instance of createdTimestamp."],[[["\\CharlotteDunois\\Yasmin\\Models\\CategoryChannel",false],["null",false]],"parent","The channel's parent, or null."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/GuildStoreChannel.php","relative_file":"\/src\/Models\/GuildStoreChannel.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\GuildStoreChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\GuildStoreChannelInterface"},"traits":{"CharlotteDunois\\Yasmin\\Traits\\GuildChannelTrait":"CharlotteDunois\\Yasmin\\Traits\\GuildChannelTrait"},"source":null,"properties":{"createdAt":{"name":"createdAt","line":27,"short_desc":"The DateTime instance of createdTimestamp.","long_desc":null,"hint":[["\\DateTime",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":27,"short_desc":"The timestamp of when this channel was created.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guild":{"name":"guild","line":27,"short_desc":"The associated guild.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":27,"short_desc":"The channel ID.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":27,"short_desc":"The channel name.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"nsfw":{"name":"nsfw","line":27,"short_desc":"Whether the channel is marked as NSFW or not.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"parent":{"name":"parent","line":27,"short_desc":"The channel's parent, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\CategoryChannel",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"parentID":{"name":"parentID","line":27,"short_desc":"The ID of the parent channel, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"permissionOverwrites":{"name":"permissionOverwrites","line":27,"short_desc":"A collection of PermissionOverwrite instances, mapped by their ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"position":{"name":"position","line":27,"short_desc":"The channel position.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__toString":{"name":"__toString","line":120,"short_desc":"Automatically converts to a mention.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\Invite":{"name":"CharlotteDunois\\Yasmin\\Models\\Invite","line":31,"short_desc":"Represents an invite.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"code","The invite code."],[[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["\\CharlotteDunois\\Yasmin\\Models\\PartialGuild",false],["null",false]],"guild","The guild which this invite belongs to, or null."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface",false],["\\CharlotteDunois\\Yasmin\\Models\\PartialChannel",false]],"channel","The channel which this invite belongs to."],[[["int",false],["null",false]],"createdTimestamp","When this invite was created, or null."],[[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"inviter","The inviter, or null."],[[["int",false],["null",false]],"maxUses","Maximum uses until the invite expires, or null."],[[["int",false],["null",false]],"maxAge","Duration (in seconds) until the invite expires, or null."],[[["bool",false],["null",false]],"revoked","If the invite is revoked, this will indicate it, or null."],[[["bool",false],["null",false]],"temporary","If this invite grants temporary membership, or null."],[[["int",false],["null",false]],"uses","Number of times this invite has been used, or null."],[[["int",false],["null",false]],"presenceCount","Approximate amount of presences, or null."],[[["int",false],["null",false]],"memberCount","Approximate amount of members, or null."],[[["\\DateTime",false],["null",false]],"createdAt","The DateTime instance of the createdTimestamp, or null."],[[["string",false]],"url","Returns the URL for the invite."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/Invite.php","relative_file":"\/src\/Models\/Invite.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"channel":{"name":"channel","line":31,"short_desc":"The channel which this invite belongs to.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface",false],["\\CharlotteDunois\\Yasmin\\Models\\PartialChannel",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"code":{"name":"code","line":31,"short_desc":"The invite code.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdAt":{"name":"createdAt","line":31,"short_desc":"The DateTime instance of the createdTimestamp, or null.","long_desc":null,"hint":[["\\DateTime",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":31,"short_desc":"When this invite was created, or null.","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guild":{"name":"guild","line":31,"short_desc":"The guild which this invite belongs to, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["\\CharlotteDunois\\Yasmin\\Models\\PartialGuild",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"inviter":{"name":"inviter","line":31,"short_desc":"The inviter, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"maxAge":{"name":"maxAge","line":31,"short_desc":"Duration (in seconds) until the invite expires, or null.","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"maxUses":{"name":"maxUses","line":31,"short_desc":"Maximum uses until the invite expires, or null.","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"memberCount":{"name":"memberCount","line":31,"short_desc":"Approximate amount of members, or null.","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"presenceCount":{"name":"presenceCount","line":31,"short_desc":"Approximate amount of presences, or null.","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"revoked":{"name":"revoked","line":31,"short_desc":"If the invite is revoked, this will indicate it, or null.","long_desc":null,"hint":[["bool",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"temporary":{"name":"temporary","line":31,"short_desc":"If this invite grants temporary membership, or null.","long_desc":null,"hint":[["bool",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"url":{"name":"url","line":31,"short_desc":"Returns the URL for the invite.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"uses":{"name":"uses","line":31,"short_desc":"Number of times this invite has been used, or null.","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"delete":{"name":"delete","line":158,"short_desc":"Deletes the invite.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"reason":{"name":"reason","line":158,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\Message":{"name":"CharlotteDunois\\Yasmin\\Models\\Message","line":40,"short_desc":"Represents a message.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The message ID."],[[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"author","The user that created the message."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface",false]],"channel","The channel this message was created in."],[[["int",false]],"createdTimestamp","The timestamp of when this message was created."],[[["int",false],["null",false]],"editedTimestamp","The timestamp of when this message was edited, or null."],[[["string",false]],"content","The message content."],[[["string",false]],"cleanContent","The message content with all mentions replaced."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"attachments","A collection of attachments in the message - mapped by their ID. ({@see \\CharlotteDunois\\Yasmin\\Models\\MessageAttachment})"],[[["\\CharlotteDunois\\Yasmin\\Models\\MessageEmbed",true]],"embeds","An array of embeds in the message."],[[["\\CharlotteDunois\\Yasmin\\Models\\MessageMentions",false]],"mentions","All valid mentions that the message contains."],[[["bool",false]],"tts","Whether or not the message is Text-To-Speech."],[[["string",false],["null",false]],"nonce","A snowflake used for checking message delivery, or null."],[[["bool",false]],"pinned","Whether the message is pinned or not."],[[["bool",false]],"system","Whether the message is a system message."],[[["string",false]],"type","The type of the message. ({@see Message::MESSAGE_TYPES})"],[[["\\CharlotteDunois\\Collect\\Collection",false]],"reactions","A collection of message reactions, mapped by ID (or name). ({@see \\CharlotteDunois\\Yasmin\\Models\\MessageReaction})"],[[["string",false],["null",false]],"webhookID","ID of the webhook that sent the message, if applicable, or null."],[[["\\CharlotteDunois\\Yasmin\\Models\\MessageActivity",false],["null",false]],"activity","The activity attached to this message. Sent with Rich Presence-related chat embeds."],[[["\\CharlotteDunois\\Yasmin\\Models\\MessageApplication",false],["null",false]],"application","The application attached to this message. Sent with Rich Presence-related chat embeds."],[[["\\DateTime",false]],"createdAt","An DateTime instance of the createdTimestamp."],[[["\\DateTime",false],["null",false]],"editedAt","An DateTime instance of the editedTimestamp, or null."],[[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"guild","The correspondending guild (if message posted in a guild), or null."],[[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["null",false]],"member","The correspondending guildmember of the author (if message posted in a guild), or null."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/Message.php","relative_file":"\/src\/Models\/Message.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"activity":{"name":"activity","line":40,"short_desc":"The activity attached to this message. Sent with Rich Presence-related chat embeds.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\MessageActivity",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"application":{"name":"application","line":40,"short_desc":"The application attached to this message. Sent with Rich Presence-related chat embeds.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\MessageApplication",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"attachments":{"name":"attachments","line":40,"short_desc":"A collection of attachments in the message - mapped by their ID. ({@see \\CharlotteDunois\\Yasmin\\Models\\MessageAttachment})","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"author":{"name":"author","line":40,"short_desc":"The user that created the message.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"channel":{"name":"channel","line":40,"short_desc":"The channel this message was created in.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\TextChannelInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"cleanContent":{"name":"cleanContent","line":40,"short_desc":"The message content with all mentions replaced.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"content":{"name":"content","line":40,"short_desc":"The message content.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdAt":{"name":"createdAt","line":40,"short_desc":"An DateTime instance of the createdTimestamp.","long_desc":null,"hint":[["\\DateTime",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":40,"short_desc":"The timestamp of when this message was created.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"editedAt":{"name":"editedAt","line":40,"short_desc":"An DateTime instance of the editedTimestamp, or null.","long_desc":null,"hint":[["\\DateTime",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"editedTimestamp":{"name":"editedTimestamp","line":40,"short_desc":"The timestamp of when this message was edited, or null.","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"embeds":{"name":"embeds","line":40,"short_desc":"An array of embeds in the message.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\MessageEmbed",true]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guild":{"name":"guild","line":40,"short_desc":"The correspondending guild (if message posted in a guild), or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":40,"short_desc":"The message ID.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"member":{"name":"member","line":40,"short_desc":"The correspondending guildmember of the author (if message posted in a guild), or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"mentions":{"name":"mentions","line":40,"short_desc":"All valid mentions that the message contains.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\MessageMentions",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"nonce":{"name":"nonce","line":40,"short_desc":"A snowflake used for checking message delivery, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"pinned":{"name":"pinned","line":40,"short_desc":"Whether the message is pinned or not.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"reactions":{"name":"reactions","line":40,"short_desc":"A collection of message reactions, mapped by ID (or name). ({@see \\CharlotteDunois\\Yasmin\\Models\\MessageReaction})","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"replySeparator":{"name":"replySeparator","line":73,"short_desc":"The string used in Message::reply to separate the mention and the content.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":{"source":[[1,null,""]]},"modifiers":9,"default":{"nodeType":"Scalar_String","value":" ","attributes":{"startLine":73,"endLine":73,"kind":1}},"errors":[],"source":["public static $replySeparator = ' ';",""]},"system":{"name":"system","line":40,"short_desc":"Whether the message is a system message.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"tts":{"name":"tts","line":40,"short_desc":"Whether or not the message is Text-To-Speech.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"type":{"name":"type","line":40,"short_desc":"The type of the message. ({@see Message::MESSAGE_TYPES})","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"webhookID":{"name":"webhookID","line":40,"short_desc":"ID of the webhook that sent the message, if applicable, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__toString":{"name":"__toString","line":468,"short_desc":"Automatically converts to the message content.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"clearReactions":{"name":"clearReactions","line":265,"short_desc":"Removes all reactions from the message. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"collectReactions":{"name":"collectReactions","line":295,"short_desc":"Collects reactions during a specific duration. Resolves with a Collection of `[ $messageReaction, $user ]` arrays, mapped by their IDs or names (unicode emojis).","long_desc":"Options are as following:\n\n```\narray(\n  'max' => int, (max. message reactions to collect)\n  'time' => int, (duration, in seconds, default 30)\n  'errors' => array, (optional, which failed \"conditions\" (max not reached in time (\"time\")) lead to a rejected promise, defaults to [])\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"This promise is cancellable.","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\MessageReaction"],["\\CharlotteDunois\\Yasmin\\Models\\User"],["\\CharlotteDunois\\Yasmin\\Utils\\Collector"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\RangeException","The exception the promise gets rejected with, if collecting times out."],["\\OutOfBoundsException","The exception the promise gets rejected with, if the promise gets cancelled."]],"errors":[],"example":null,"source":null,"parameters":{"filter":{"name":"filter","line":295,"short_desc":"The filter to only collect desired reactions. Signature: `function (MessageReaction $messageReaction, User $user): bool`","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":295,"short_desc":"The collector options.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"delete":{"name":"delete","line":338,"short_desc":"Deletes the message.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"timeout":{"name":"timeout","line":338,"short_desc":"An integer or float as timeout in seconds, after which the message gets deleted.","long_desc":null,"hint":[["float",false],["int",false]],"tags":[],"modifiers":null,"default":"0","variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":338,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"edit":{"name":"edit","line":314,"short_desc":"Edits the message. You need to be the author of the message. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Traits\\TextChannelTrait::send()"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"content":{"name":"content","line":314,"short_desc":"The message contents.","long_desc":null,"hint":[["string",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"string","attributes":{"startLine":314,"endLine":314}},"default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":314,"short_desc":"An array with options. Only embed is supported by edit.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"fetchWebhook":{"name":"fetchWebhook","line":358,"short_desc":"Fetches the webhook used to create this message. Resolves with an instance of Webhook.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Webhook"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""]],"errors":[],"example":null,"source":null,"parameters":[]},"getJumpURL":{"name":"getJumpURL","line":375,"short_desc":"Returns the jump to message link for this message.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"pin":{"name":"pin","line":384,"short_desc":"Pins the message. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"react":{"name":"react","line":399,"short_desc":"Reacts to the message with the specified unicode or custom emoji. Resolves with an instance of MessageReaction.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\MessageReaction"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"emoji":{"name":"emoji","line":399,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",false],["\\CharlotteDunois\\Yasmin\\Models\\MessageReaction",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"reply":{"name":"reply","line":448,"short_desc":"Replies to the message. Resolves with an instance of Message, or with a Collection of Message instances, mapped by their ID.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Traits\\TextChannelTrait::send()"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"content":{"name":"content","line":448,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":448,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"unpin":{"name":"unpin","line":456,"short_desc":"Unpins the message. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":{"DEFAULT_SPLIT_OPTIONS":{"name":"DEFAULT_SPLIT_OPTIONS","line":45,"short_desc":"Default Message Split Options.","long_desc":"","source":["const DEFAULT_SPLIT_OPTIONS = array(\n    'before' => '',\n    'after' => '',\n    'char' => \"\\n\",\n    'maxLength' => 1950\n);",""]},"MESSAGE_TYPES":{"name":"MESSAGE_TYPES","line":57,"short_desc":"Messages Types.","long_desc":"","source":["const MESSAGE_TYPES = array(\n    0 => 'DEFAULT',\n    1 => 'RECIPIENT_ADD',\n    2 => 'RECIPIENT_REMOVE',\n    3 => 'CALL',\n    4 => 'CHANNEL_NAME_CHANGE',\n    5 => 'CHANNEL_ICON_CHANGE',\n    6 => 'CHANNEL_PINNED_MESSAGE',\n    7 => 'GUILD_MEMBER_JOIN'\n);",""]}}},"CharlotteDunois\\Yasmin\\Models\\MessageActivity":{"name":"CharlotteDunois\\Yasmin\\Models\\MessageActivity","line":21,"short_desc":"Represents a message activity.","long_desc":"","hint":null,"tags":{"property":[[[["string",false],["null",false]],"partyID","The party ID associated with this message activity, or null."],[[["int",false]],"type","The message activity type. ({@see self::TYPES})"],[[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"user","The user this message activity is for."],[[["\\CharlotteDunois\\Yasmin\\Models\\Activity",false],["null",false]],"activity","The activity this message activity points to, or null."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/MessageActivity.php","relative_file":"\/src\/Models\/MessageActivity.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"activity":{"name":"activity","line":21,"short_desc":"The activity this message activity points to, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Activity",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"partyID":{"name":"partyID","line":21,"short_desc":"The party ID associated with this message activity, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"type":{"name":"type","line":21,"short_desc":"The message activity type. ({@see self::TYPES})","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"user":{"name":"user","line":21,"short_desc":"The user this message activity is for.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":[],"constants":{"TYPES":{"name":"TYPES","line":27,"short_desc":"The Message Activity types.","long_desc":"","source":["const TYPES = array(\n    'JOIN' => 1,\n    'SPECTATE' => 2,\n    'LISTEN' => 3,\n    'JOIN_REQUEST' => 5\n);",""]}}},"CharlotteDunois\\Yasmin\\Models\\MessageApplication":{"name":"CharlotteDunois\\Yasmin\\Models\\MessageApplication","line":21,"short_desc":"Represents a message application.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The ID of the application."],[[["string",false]],"name","The name of the application."],[[["string",false],["null",false]],"icon","The hash of the application icon, or null."],[[["string",false],["null",false]],"coverImage","The hash of the application cover image, or null."],[[["string",false]],"description","The description of the application."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/MessageApplication.php","relative_file":"\/src\/Models\/MessageApplication.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"coverImage":{"name":"coverImage","line":21,"short_desc":"The hash of the application cover image, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"description":{"name":"description","line":21,"short_desc":"The description of the application.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"icon":{"name":"icon","line":21,"short_desc":"The hash of the application icon, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":21,"short_desc":"The ID of the application.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":21,"short_desc":"The name of the application.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"getCoverImageURL":{"name":"getCoverImageURL","line":85,"short_desc":"Returns the URL of the cover image.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":85,"short_desc":"Any powers of 2 (16-2048).","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":85,"endLine":85}},"default":"null","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\MessageAttachment":{"name":"CharlotteDunois\\Yasmin\\Models\\MessageAttachment","line":25,"short_desc":"Represents an attachment (from a message).","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The attachment ID."],[[["string",false]],"filename","The filename."],[[["int",false]],"size","The filesize in bytes."],[[["string",false]],"url","The url to the file."],[[["int",false],["null",false]],"height","The height (if image), or null."],[[["int",false],["null",false]],"width","The width (if image), or null."],[[["int",false]],"createdTimestamp","The timestamp of when this attachment was created."],[[["\\DateTime",false]],"createdAt","An DateTime instance of the createdTimestamp."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/MessageAttachment.php","relative_file":"\/src\/Models\/MessageAttachment.php","parent":"CharlotteDunois\\Yasmin\\Models\\Base","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"createdAt":{"name":"createdAt","line":25,"short_desc":"An DateTime instance of the createdTimestamp.","long_desc":null,"hint":[["\\DateTime",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":25,"short_desc":"The timestamp of when this attachment was created.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"filename":{"name":"filename","line":25,"short_desc":"The filename.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"height":{"name":"height","line":25,"short_desc":"The height (if image), or null.","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":25,"short_desc":"The attachment ID.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"size":{"name":"size","line":25,"short_desc":"The filesize in bytes.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"url":{"name":"url","line":25,"short_desc":"The url to the file.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"width":{"name":"width","line":25,"short_desc":"The width (if image), or null.","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__construct":{"name":"__construct","line":79,"short_desc":"Constructs a new instance.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"attachment":{"name":"attachment","line":79,"short_desc":"This parameter is used internally and should not be used.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"setAttachment":{"name":"setAttachment","line":118,"short_desc":"Sets the attachment.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"attachment":{"name":"attachment","line":118,"short_desc":"An URL or the filepath, or the data.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"filename":{"name":"filename","line":118,"short_desc":"The filename.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\MessageEmbed":{"name":"CharlotteDunois\\Yasmin\\Models\\MessageEmbed","line":31,"short_desc":"Represents a received embed from a message. This class can also be used to make a Rich Embed.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"type","The embed type."],[[["string",false],["null",false]],"title","The title, or null."],[[["array",false],["null",false]],"author","The author in the format `[ 'name' => string, 'icon' => string, 'url' => string ]`, or null."],[[["string",false],["null",false]],"description","The description, or null."],[[["string",false],["null",false]],"url","The URL, or null."],[[["int",false],["string",false],["null",false]],"timestamp","The timestamp, or the set timestamp (as ISO string), or null."],[[["int",false],["null",false]],"color","The color, or null."],[[["array",false],["null",false]],"footer","The footer in the format `[ 'name' => string, 'icon' => string ]`, or null."],[[["array",false],["null",false]],"image","The image in the format `[ 'url' => string, 'height' => int, 'width' => int ]`, or null."],[[["array",false],["null",false]],"thumbnail","The thumbnail in the format `[ 'url' => string, 'height' => int, 'width' => int ]`, or null."],[[["array",false],["null",false]],"video","The video in the format `[ 'url' => string, 'height' => int, 'width' => int ]`, or null."],[[["array",false],["null",false]],"provider","The provider in the format `[ 'name' => string, 'url' => string ]`, or null."],[[["array",true]],"fields","An array of embed fields in the format `[ 'name' > string, 'value' => string, 'inline' => bool ]`."],[[["\\DateTime",false],["null",false]],"datetime","The DateTime instance of timestamp, or null."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/MessageEmbed.php","relative_file":"\/src\/Models\/MessageEmbed.php","parent":"CharlotteDunois\\Yasmin\\Models\\Base","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"author":{"name":"author","line":31,"short_desc":"The author in the format `[ 'name' => string, 'icon' => string, 'url' => string ]`, or null.","long_desc":null,"hint":[["array",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"color":{"name":"color","line":31,"short_desc":"The color, or null.","long_desc":null,"hint":[["int",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"datetime":{"name":"datetime","line":31,"short_desc":"The DateTime instance of timestamp, or null.","long_desc":null,"hint":[["\\DateTime",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"description":{"name":"description","line":31,"short_desc":"The description, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"fields":{"name":"fields","line":31,"short_desc":"An array of embed fields in the format `[ 'name' > string, 'value' => string, 'inline' => bool ]`.","long_desc":null,"hint":[["array",true]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"footer":{"name":"footer","line":31,"short_desc":"The footer in the format `[ 'name' => string, 'icon' => string ]`, or null.","long_desc":null,"hint":[["array",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"image":{"name":"image","line":31,"short_desc":"The image in the format `[ 'url' => string, 'height' => int, 'width' => int ]`, or null.","long_desc":null,"hint":[["array",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"provider":{"name":"provider","line":31,"short_desc":"The provider in the format `[ 'name' => string, 'url' => string ]`, or null.","long_desc":null,"hint":[["array",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"thumbnail":{"name":"thumbnail","line":31,"short_desc":"The thumbnail in the format `[ 'url' => string, 'height' => int, 'width' => int ]`, or null.","long_desc":null,"hint":[["array",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"timestamp":{"name":"timestamp","line":31,"short_desc":"The timestamp, or the set timestamp (as ISO string), or null.","long_desc":null,"hint":[["int",false],["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"title":{"name":"title","line":31,"short_desc":"The title, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"type":{"name":"type","line":31,"short_desc":"The embed type.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"url":{"name":"url","line":31,"short_desc":"The URL, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"video":{"name":"video","line":31,"short_desc":"The video in the format `[ 'url' => string, 'height' => int, 'width' => int ]`, or null.","long_desc":null,"hint":[["array",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__construct":{"name":"__construct","line":115,"short_desc":"Constructs a new instance.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Throwable",""]],"errors":[],"example":null,"source":null,"parameters":{"embed":{"name":"embed","line":115,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"addField":{"name":"addField","line":384,"short_desc":"Adds a field to this embed.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RangeException",""],["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"title":{"name":"title","line":384,"short_desc":"Maximum length is 256 characters.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":384,"short_desc":"Maximum length is 1024 characters.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"inline":{"name":"inline","line":384,"short_desc":"Whether this field gets shown with other inline fields on one line.","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false}}},"setAuthor":{"name":"setAuthor","line":216,"short_desc":"Set the author of this embed.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":216,"short_desc":"Maximum length is 256 characters.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"iconurl":{"name":"iconurl","line":216,"short_desc":"The URL to the icon.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false},"url":{"name":"url","line":216,"short_desc":"The URL to the author.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setColor":{"name":"setColor","line":248,"short_desc":"Set the color of this embed.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Utils\\DataHelpers::resolveColor()"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"color":{"name":"color","line":248,"short_desc":"","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"setDescription":{"name":"setDescription","line":259,"short_desc":"Set the description of this embed.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"description":{"name":"description","line":259,"short_desc":"Maximum length is 2048 characters.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"setFooter":{"name":"setFooter","line":286,"short_desc":"Set the footer of this embed.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"text":{"name":"text","line":286,"short_desc":"Maximum length is 2048 characters.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"iconurl":{"name":"iconurl","line":286,"short_desc":"The URL to the icon.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setImage":{"name":"setImage","line":315,"short_desc":"Set the image of this embed.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"url":{"name":"url","line":315,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"setThumbnail":{"name":"setThumbnail","line":325,"short_desc":"Set the thumbnail of this embed.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"url":{"name":"url","line":325,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"setTimestamp":{"name":"setTimestamp","line":336,"short_desc":"Set the timestamp of this embed.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\Exception",""]],"errors":[],"example":null,"source":null,"parameters":{"timestamp":{"name":"timestamp","line":336,"short_desc":"","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":336,"endLine":336}},"default":"null","variadic":false,"is_by_ref":false}}},"setTitle":{"name":"setTitle","line":347,"short_desc":"Set the title of this embed.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"title":{"name":"title","line":347,"short_desc":"Maximum length is 256 characters.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"setURL":{"name":"setURL","line":370,"short_desc":"Set the URL of this embed.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"url":{"name":"url","line":370,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\MessageMentions":{"name":"CharlotteDunois\\Yasmin\\Models\\MessageMentions","line":22,"short_desc":"Holds message mentions.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"message","The message these mentions belongs to."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"channels","The collection which holds all channel mentions, mapped by their ID."],[[["bool",false]],"everyone","Whether the message mentions @everyone or @here."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"members","The collection which holds all members mentions (only in guild channels), mapped by their ID. Only cached members can be put into this Collection."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"roles","The collection which holds all roles mentions, mapped by their ID."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"users","The collection which holds all users mentions, mapped by their ID."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/MessageMentions.php","relative_file":"\/src\/Models\/MessageMentions.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"channels":{"name":"channels","line":22,"short_desc":"The collection which holds all channel mentions, mapped by their ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"everyone":{"name":"everyone","line":22,"short_desc":"Whether the message mentions @everyone or @here.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"members":{"name":"members","line":22,"short_desc":"The collection which holds all members mentions (only in guild channels), mapped by their ID. Only cached members can be put into this Collection.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"message":{"name":"message","line":22,"short_desc":"The message these mentions belongs to.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"roles":{"name":"roles","line":22,"short_desc":"The collection which holds all roles mentions, mapped by their ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"users":{"name":"users","line":22,"short_desc":"The collection which holds all users mentions, mapped by their ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":[],"constants":{"PATTERN_CHANNELS":{"name":"PATTERN_CHANNELS","line":28,"short_desc":"RegEx pattern to match channel mentions.","long_desc":"","source":["const PATTERN_CHANNELS = '\/<#(\\d+)>\/';",""]},"PATTERN_EMOJIS":{"name":"PATTERN_EMOJIS","line":35,"short_desc":"RegEx pattern to match custom emoji mentions.","long_desc":"","source":["const PATTERN_EMOJIS = '\/<a?:(?:.*?):(\\d+)>\/';",""]},"PATTERN_ROLES":{"name":"PATTERN_ROLES","line":42,"short_desc":"RegEx pattern to match role mentions.","long_desc":"","source":["const PATTERN_ROLES = '\/<@&(\\d+)>\/';",""]},"PATTERN_USERS":{"name":"PATTERN_USERS","line":49,"short_desc":"RegEx pattern to match user mentions.","long_desc":"","source":["const PATTERN_USERS = '\/<@!?(\\d+)>\/';",""]}}},"CharlotteDunois\\Yasmin\\Models\\MessageReaction":{"name":"CharlotteDunois\\Yasmin\\Models\\MessageReaction","line":21,"short_desc":"Represents a message reaction.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",false]],"emoji","The emoji this message reaction is for."],[[["int",false]],"count","Times this emoji has been reacted."],[[["bool",false]],"me","Whether the current user has reacted using this emoji."],[[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"message","The message this reaction belongs to."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"users","The users that have given this reaction, mapped by their ID."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/MessageReaction.php","relative_file":"\/src\/Models\/MessageReaction.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"count":{"name":"count","line":21,"short_desc":"Times this emoji has been reacted.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"emoji":{"name":"emoji","line":21,"short_desc":"The emoji this message reaction is for.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Emoji",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"me":{"name":"me","line":21,"short_desc":"Whether the current user has reacted using this emoji.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"message":{"name":"message","line":21,"short_desc":"The message this reaction belongs to.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"users":{"name":"users","line":21,"short_desc":"The users that have given this reaction, mapped by their ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"fetchUsers":{"name":"fetchUsers","line":87,"short_desc":"Fetches all the users that gave this reaction. Resolves with a Collection of User instances, mapped by their IDs.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\User"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"limit":{"name":"limit","line":87,"short_desc":"The maximum amount of users to fetch, defaults to 100.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"100","variadic":false,"is_by_ref":false},"before":{"name":"before","line":87,"short_desc":"Limit fetching users to those with an ID smaller than the given ID.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false},"after":{"name":"after","line":87,"short_desc":"Limit fetching users to those with an ID greater than the given ID.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"remove":{"name":"remove","line":118,"short_desc":"Removes an user from the reaction. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":118,"short_desc":"Defaults to the client user.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["string",false]],"tags":[],"modifiers":null,"default":"null","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\MessageStorage":{"name":"CharlotteDunois\\Yasmin\\Models\\MessageStorage","line":15,"short_desc":"Message Storage to store and handle messages, utilizes Collection.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/MessageStorage.php","relative_file":"\/src\/Models\/MessageStorage.php","parent":"CharlotteDunois\\Yasmin\\Models\\Storage","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\MessageStorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\MessageStorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"delete":{"name":"delete","line":103,"short_desc":"Removes an item.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":103,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"get":{"name":"get","line":79,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":79,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":70,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":70,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"set":{"name":"set","line":89,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":89,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":89,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"sweep":{"name":"sweep","line":113,"short_desc":"Sweeps messages, deletes messages older than the parameter (timestamp - $time). Returns the amount of sweeped messages.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"time":{"name":"time","line":113,"short_desc":"0 = clear all","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\OAuthApplication":{"name":"CharlotteDunois\\Yasmin\\Models\\OAuthApplication","line":24,"short_desc":"Represents an OAuth Application.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The application ID."],[[["string",false]],"name","The name of the application."],[[["string",false],["null",false]],"icon","The hash of the application hash, or null."],[[["string",false],["null",false]],"description","The application's description, or null."],[[["string",true],["null",false]],"rpcOrigins","An array of RPC origin url strings, if RPC is enabled, or null."],[[["bool",false]],"botPublic","Whether the bot is public."],[[["bool",false]],"botRequireCodeGrant","Whether the bot requires a code grant (full OAuth flow)."],[[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"owner","The User instance of the owner, or null."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/OAuthApplication.php","relative_file":"\/src\/Models\/OAuthApplication.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"botPublic":{"name":"botPublic","line":24,"short_desc":"Whether the bot is public.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"botRequireCodeGrant":{"name":"botRequireCodeGrant","line":24,"short_desc":"Whether the bot requires a code grant (full OAuth flow).","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"description":{"name":"description","line":24,"short_desc":"The application's description, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"icon":{"name":"icon","line":24,"short_desc":"The hash of the application hash, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":24,"short_desc":"The application ID.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":24,"short_desc":"The name of the application.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"owner":{"name":"owner","line":24,"short_desc":"The User instance of the owner, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"rpcOrigins":{"name":"rpcOrigins","line":24,"short_desc":"An array of RPC origin url strings, if RPC is enabled, or null.","long_desc":null,"hint":[["string",true],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__toString":{"name":"__toString","line":121,"short_desc":"Automatically converts to the application name.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getIconURL":{"name":"getIconURL","line":109,"short_desc":"Returns the application's icon URL, or null.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":109,"short_desc":"One of 128, 256, 512, 1024 or 2048.","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":109,"endLine":109}},"default":"null","variadic":false,"is_by_ref":false},"format":{"name":"format","line":109,"short_desc":"One of png, jpg or webp.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"'png'","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\PartialChannel":{"name":"CharlotteDunois\\Yasmin\\Models\\PartialChannel","line":23,"short_desc":"Represents a partial channel (of a guild or a group DM).","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The channel ID."],[[["string",false],["null",false]],"name","The channel name, or null."],[[["string",false]],"type","The type of the channel."],[[["string",false],["null",false]],"icon","The icon of the channel, or null."],[[["int",false]],"createdTimestamp","The timestamp when this channel was created."],[[["\\DateTime",false]],"createdAt","The DateTime instance of createdTimestamp."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/PartialChannel.php","relative_file":"\/src\/Models\/PartialChannel.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"createdAt":{"name":"createdAt","line":23,"short_desc":"The DateTime instance of createdTimestamp.","long_desc":null,"hint":[["\\DateTime",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":23,"short_desc":"The timestamp when this channel was created.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"icon":{"name":"icon","line":23,"short_desc":"The icon of the channel, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":23,"short_desc":"The channel ID.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":23,"short_desc":"The channel name, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"type":{"name":"type","line":23,"short_desc":"The type of the channel.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__toString":{"name":"__toString","line":110,"short_desc":"Automatically converts to the channel name.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getIconURL":{"name":"getIconURL","line":94,"short_desc":"Returns the group DM's icon URL, or null.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":94,"short_desc":"One of 128, 256, 512, 1024 or 2048.","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":94,"endLine":94}},"default":"null","variadic":false,"is_by_ref":false},"format":{"name":"format","line":94,"short_desc":"One of png, jpg or webp.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"'png'","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\PartialGuild":{"name":"CharlotteDunois\\Yasmin\\Models\\PartialGuild","line":23,"short_desc":"Represents a partial guild.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The guild ID."],[[["string",false]],"name","The guild name."],[[["int",false]],"createdTimestamp","The timestamp when this guild was created."],[[["string",false],["null",false]],"icon","The guild icon, or null."],[[["string",false],["null",false]],"splash","The guild splash, or null."],[[["\\DateTime",false]],"createdAt","The DateTime instance of createdTimestamp."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/PartialGuild.php","relative_file":"\/src\/Models\/PartialGuild.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"createdAt":{"name":"createdAt","line":23,"short_desc":"The DateTime instance of createdTimestamp.","long_desc":null,"hint":[["\\DateTime",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":23,"short_desc":"The timestamp when this guild was created.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"icon":{"name":"icon","line":23,"short_desc":"The guild icon, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":23,"short_desc":"The guild ID.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":23,"short_desc":"The guild name.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"splash":{"name":"splash","line":23,"short_desc":"The guild splash, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__toString":{"name":"__toString","line":133,"short_desc":"Automatically converts to the guild name.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"getIconURL":{"name":"getIconURL","line":95,"short_desc":"Returns the guild's icon URL, or null.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException","Thrown if $size is not a power of 2"]],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":95,"short_desc":"One of 128, 256, 512, 1024 or 2048.","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":95,"endLine":95}},"default":"null","variadic":false,"is_by_ref":false},"format":{"name":"format","line":95,"short_desc":"One of png, jpg or webp.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"getSplashURL":{"name":"getSplashURL","line":117,"short_desc":"Returns the guild's splash URL, or null.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":117,"short_desc":"One of 128, 256, 512, 1024 or 2048.","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":117,"endLine":117}},"default":"null","variadic":false,"is_by_ref":false},"format":{"name":"format","line":117,"short_desc":"One of png, jpg or webp.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"'png'","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\PermissionOverwrite":{"name":"CharlotteDunois\\Yasmin\\Models\\PermissionOverwrite","line":24,"short_desc":"Represents a permission overwrite.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface",false]],"channel","The channel this Permission Overwrite belongs to."],[[["string",false]],"id","The ID of the Permission Overwrite."],[[["string",false]],"type","The type of the overwrite (member or role)."],[[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false]],"allow","The allowed Permissions instance."],[[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false]],"deny","The denied Permissions instance."],[[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"guild","The guild this Permission Overwrite belongs to."],[[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["null",false]],"target","The role or guild member, or null if not a cached member."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/PermissionOverwrite.php","relative_file":"\/src\/Models\/PermissionOverwrite.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"allow":{"name":"allow","line":24,"short_desc":"The allowed Permissions instance.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"channel":{"name":"channel","line":24,"short_desc":"The channel this Permission Overwrite belongs to.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"deny":{"name":"deny","line":24,"short_desc":"The denied Permissions instance.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guild":{"name":"guild","line":24,"short_desc":"The guild this Permission Overwrite belongs to.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":24,"short_desc":"The ID of the Permission Overwrite.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"target":{"name":"target","line":24,"short_desc":"The role or guild member, or null if not a cached member.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"type":{"name":"type","line":24,"short_desc":"The type of the overwrite (member or role).","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"delete":{"name":"delete","line":140,"short_desc":"Deletes the permission overwrite.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"reason":{"name":"reason","line":140,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"edit":{"name":"edit","line":99,"short_desc":"Edits the permission overwrite. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"allow":{"name":"allow","line":99,"short_desc":"Which permissions should be allowed?","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false],["int",false],["null",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"deny":{"name":"deny","line":99,"short_desc":"Which permissions should be denied?","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false],["int",false],["null",false]],"tags":[],"modifiers":null,"default":"null","variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":99,"short_desc":"The reason for this.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\Permissions":{"name":"CharlotteDunois\\Yasmin\\Models\\Permissions","line":17,"short_desc":"Permissions. Something fabulous.","long_desc":"","hint":null,"tags":{"property":[[[["int",false]],"bitfield","The bitfield value."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/Permissions.php","relative_file":"\/src\/Models\/Permissions.php","parent":"CharlotteDunois\\Yasmin\\Models\\Base","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"bitfield":{"name":"bitfield","line":17,"short_desc":"The bitfield value.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__construct":{"name":"__construct","line":81,"short_desc":"Constructs a new instance.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"permission":{"name":"permission","line":81,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"0","variadic":false,"is_by_ref":false}}},"add":{"name":"add","line":150,"short_desc":"Adds permissions to these ones.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"permissions":{"name":"permissions","line":150,"short_desc":"","long_desc":null,"hint":[["int",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":true,"is_by_ref":false}}},"has":{"name":"has","line":114,"short_desc":"Checks if a given permission is granted.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"permissions":{"name":"permissions","line":114,"short_desc":"","long_desc":null,"hint":[["array",false],["int",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"checkAdmin":{"name":"checkAdmin","line":114,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"true","variadic":false,"is_by_ref":false}}},"missing":{"name":"missing","line":140,"short_desc":"Checks if a given permission is missing.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"permissions":{"name":"permissions","line":140,"short_desc":"","long_desc":null,"hint":[["array",false],["int",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"checkAdmin":{"name":"checkAdmin","line":140,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"true","variadic":false,"is_by_ref":false}}},"remove":{"name":"remove","line":167,"short_desc":"Removes permissions from these ones.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"permissions":{"name":"permissions","line":167,"short_desc":"","long_desc":null,"hint":[["int",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":true,"is_by_ref":false}}},"resolve":{"name":"resolve","line":184,"short_desc":"Resolves a permission name to number.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"permission":{"name":"permission","line":184,"short_desc":"","long_desc":null,"hint":[["int",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"resolveToName":{"name":"resolveToName","line":200,"short_desc":"Resolves a permission number to the name. Also checks if a given name is a valid permission.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"permission":{"name":"permission","line":200,"short_desc":"","long_desc":null,"hint":[["int",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":{"ALL":{"name":"ALL","line":23,"short_desc":"The value of the bitfield with all permissions granted.","long_desc":"","source":["const ALL = 2146958847;",""]},"CHANNEL_UNACCESSIBLE_PERMISSIONS":{"name":"CHANNEL_UNACCESSIBLE_PERMISSIONS","line":69,"short_desc":"The bitfield to remove from channel overwrites to prevent wrong calculated final permissions, as they do nothing.","long_desc":"","source":null},"PERMISSIONS":{"name":"PERMISSIONS","line":30,"short_desc":"Available Permissions in Discord.","long_desc":"","source":["const PERMISSIONS = array(\n    'CREATE_INSTANT_INVITE' => (1 << 0),\n    'KICK_MEMBERS' => (1 << 1),\n    'BAN_MEMBERS' => (1 << 2),\n    'ADMINISTRATOR' => (1 << 3),\n    'MANAGE_CHANNELS' => (1 << 4),\n    'MANAGE_GUILD' => (1 << 5),\n    'ADD_REACTIONS' => (1 << 6),\n    'VIEW_AUDIT_LOG' => (1 << 7),\n    'PRIORITY_SPEAKER' => (1 << 8),\n\n    'VIEW_CHANNEL' => (1 << 10),\n    'SEND_MESSAGES' => (1 << 11),\n    'SEND_TTS_MESSAGES' => (1 << 12),\n    'MANAGE_MESSAGES' => (1 << 13),\n    'EMBED_LINKS' => (1 << 14),\n    'ATTACH_FILES' => (1 << 15),\n    'READ_MESSAGE_HISTORY' => (1 << 16),\n    'MENTION_EVERYONE' => (1 << 17),\n    'USE_EXTERNAL_EMOJIS' => (1 << 18),\n\n    'CONNECT' => (1 << 20),\n    'SPEAK' => (1 << 21),\n    'MUTE_MEMBERS' => (1 << 22),\n    'DEAFEN_MEMBERS' => (1 << 23),\n    'MOVE_MEMBERS' => (1 << 24),\n    'USE_VAD' => (1 << 25),\n\n    'CHANGE_NICKNAME' => (1 << 26),\n    'MANAGE_NICKNAMES' => (1 << 27),\n    'MANAGE_ROLES' => (1 << 28),\n    'MANAGE_WEBHOOKS' => (1 << 29),\n    'MANAGE_EMOJIS' => (1 << 30)\n);",""]}}},"CharlotteDunois\\Yasmin\\Models\\Presence":{"name":"CharlotteDunois\\Yasmin\\Models\\Presence","line":23,"short_desc":"Represents a presence.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Yasmin\\Models\\Activity",false],["null",false]],"activity","The current activity the user is doing, or null."],[[["\\CharlotteDunois\\Yasmin\\Models\\Activity",true]],"activities","All activities the user is doing."],[[["string",false]],"status","What do you expect this to be?"],[[["\\CharlotteDunois\\Yasmin\\Models\\ClientStatus",false],["null",false]],"clientStatus","The client's status on desktop\/mobile\/web, or null."],[[["string",false]],"userID","The user ID this presence belongs to."],[[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"user","The user this presence belongs to."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/Presence.php","relative_file":"\/src\/Models\/Presence.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"activities":{"name":"activities","line":23,"short_desc":"All activities the user is doing.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Activity",true]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"activity":{"name":"activity","line":23,"short_desc":"The current activity the user is doing, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Activity",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"clientStatus":{"name":"clientStatus","line":23,"short_desc":"The client's status on desktop\/mobile\/web, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\ClientStatus",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"status":{"name":"status","line":23,"short_desc":"What do you expect this to be?","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"user":{"name":"user","line":23,"short_desc":"The user this presence belongs to.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"userID":{"name":"userID","line":23,"short_desc":"The user ID this presence belongs to.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__construct":{"name":"__construct","line":61,"short_desc":"The manual creation of such an instance is discouraged. There may be an easy and safe way to create such an instance in the future.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":61,"short_desc":"The client this instance is for.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Client",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Client"],"attributes":{"startLine":61,"endLine":61}},"default":null,"variadic":false,"is_by_ref":false},"presence":{"name":"presence","line":61,"short_desc":"An array containing user (as array, with an element id), activity (as array) and status.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\PresenceStorage":{"name":"CharlotteDunois\\Yasmin\\Models\\PresenceStorage","line":15,"short_desc":"Presence Storage, which utilizes Collection.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/PresenceStorage.php","relative_file":"\/src\/Models\/PresenceStorage.php","parent":"CharlotteDunois\\Yasmin\\Models\\Storage","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\PresenceStorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\PresenceStorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"delete":{"name":"delete","line":98,"short_desc":"Removes an item.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":98,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"get":{"name":"get","line":70,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":70,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":61,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":61,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"resolve":{"name":"resolve","line":36,"short_desc":"Resolves given data to a presence.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"presence":{"name":"presence","line":36,"short_desc":"string\/int = user ID","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false],["\\CharlotteDunois\\Yasmin\\Models\\User",false],["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"set":{"name":"set","line":80,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":80,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":80,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\RichPresenceAssets":{"name":"CharlotteDunois\\Yasmin\\Models\\RichPresenceAssets","line":21,"short_desc":"Rich Presence assets.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Yasmin\\Models\\Activity",false]],"activity","The activity which these assets belong to."],[[["string",false],["null",false]],"largeImage","The ID of the large image, or null."],[[["string",false],["null",false]],"largeText","The text of the large image, or null."],[[["string",false],["null",false]],"smallImage","The ID of the small image, or null."],[[["string",false],["null",false]],"smallText","The text of the small image, or null."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/RichPresenceAssets.php","relative_file":"\/src\/Models\/RichPresenceAssets.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"activity":{"name":"activity","line":21,"short_desc":"The activity which these assets belong to.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Activity",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"largeImage":{"name":"largeImage","line":21,"short_desc":"The ID of the large image, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"largeText":{"name":"largeText","line":21,"short_desc":"The text of the large image, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"smallImage":{"name":"smallImage","line":21,"short_desc":"The ID of the small image, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"smallText":{"name":"smallText","line":21,"short_desc":"The text of the small image, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"getLargeImageURL":{"name":"getLargeImageURL","line":88,"short_desc":"Returns the URL of the large image.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":88,"short_desc":"Any powers of 2 (16-2048).","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":88,"endLine":88}},"default":"null","variadic":false,"is_by_ref":false}}},"getSmallImageURL":{"name":"getSmallImageURL","line":109,"short_desc":"Returns the URL of the small image.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":109,"short_desc":"Any powers of 2 (16-2048).","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":109,"endLine":109}},"default":"null","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\Role":{"name":"CharlotteDunois\\Yasmin\\Models\\Role","line":30,"short_desc":"Represents a role.","long_desc":"","hint":null,"tags":{"property":[[[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"guild","The guild the role belongs to."],[[["string",false]],"id","The role ID."],[[["string",false]],"name","The role name."],[[["int",false]],"createdTimestamp","The timestamp of when the role was created."],[[["int",false]],"color","The color of the role."],[[["bool",false]],"hoist","Whether the role gets displayed separately in the member list."],[[["int",false]],"position","The position of the role in the API."],[[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false]],"permissions","The permissions of the role."],[[["bool",false]],"managed","Whether the role is managed by an integration."],[[["bool",false]],"mentionable","Whether the role is mentionable."],[[["\\DateTime",false]],"createdAt","The DateTime instance of createdTimestamp."],[[["string",false]],"hexColor","Returns the hex color of the role color."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"members","A collection of all (cached) guild members which have the role."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/Role.php","relative_file":"\/src\/Models\/Role.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"color":{"name":"color","line":30,"short_desc":"The color of the role.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdAt":{"name":"createdAt","line":30,"short_desc":"The DateTime instance of createdTimestamp.","long_desc":null,"hint":[["\\DateTime",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":30,"short_desc":"The timestamp of when the role was created.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guild":{"name":"guild","line":30,"short_desc":"The guild the role belongs to.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"hexColor":{"name":"hexColor","line":30,"short_desc":"Returns the hex color of the role color.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"hoist":{"name":"hoist","line":30,"short_desc":"Whether the role gets displayed separately in the member list.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":30,"short_desc":"The role ID.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"managed":{"name":"managed","line":30,"short_desc":"Whether the role is managed by an integration.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"members":{"name":"members","line":30,"short_desc":"A collection of all (cached) guild members which have the role.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"mentionable":{"name":"mentionable","line":30,"short_desc":"Whether the role is mentionable.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":30,"short_desc":"The role name.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"permissions":{"name":"permissions","line":30,"short_desc":"The permissions of the role.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"position":{"name":"position","line":30,"short_desc":"The position of the role in the API.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__toString":{"name":"__toString","line":333,"short_desc":"Automatically converts to a mention.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"comparePositionTo":{"name":"comparePositionTo","line":169,"short_desc":"Compares the position from the role to the given role.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"role":{"name":"role","line":169,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Role"],"attributes":{"startLine":169,"endLine":169}},"default":null,"variadic":false,"is_by_ref":false}}},"delete":{"name":"delete","line":225,"short_desc":"Deletes the role.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"reason":{"name":"reason","line":225,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"edit":{"name":"edit","line":199,"short_desc":"Edits the role with the given options. Resolves with $this.","long_desc":"Options are as following (only one is required):\n\n```\narray(\n  'name' => string,\n  'color' => int|string,\n  'hoist' => bool,\n  'position' => int,\n  'permissions' => int|\\CharlotteDunois\\Yasmin\\Models\\Permissions,\n  'mentionable' => bool\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Utils\\DataHelpers::resolveColor()"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":199,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":199,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"getCalculatedPosition":{"name":"getCalculatedPosition","line":237,"short_desc":"Calculates the positon of the role in the Discord client.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isEditable":{"name":"isEditable","line":249,"short_desc":"Whether the role can be edited by the client user.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"setColor":{"name":"setColor","line":270,"short_desc":"Set the color of the role. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Utils\\DataHelpers::resolveColor()"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"color":{"name":"color","line":270,"short_desc":"","long_desc":null,"hint":[["int",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":270,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setHoist":{"name":"setHoist","line":281,"short_desc":"Set whether or not the role should be hoisted. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"hoist":{"name":"hoist","line":281,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":281,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setMentionable":{"name":"setMentionable","line":292,"short_desc":"Set whether the role is mentionable. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"mentionable":{"name":"mentionable","line":292,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":292,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setName":{"name":"setName","line":303,"short_desc":"Set a new name for the role. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":303,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":303,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setPermissions":{"name":"setPermissions","line":314,"short_desc":"Set the permissions of the role. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"permissions":{"name":"permissions","line":314,"short_desc":"","long_desc":null,"hint":[["int",false],["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":314,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setPosition":{"name":"setPosition","line":325,"short_desc":"Set the position of the role. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"position":{"name":"position","line":325,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":325,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":{"DISCORD_COLORS":{"name":"DISCORD_COLORS","line":36,"short_desc":"The default discord role colors. Mapped by uppercase string to integer.","long_desc":"","source":["const DISCORD_COLORS = array(\n    'AQUA' => 1752220,\n    'BLUE' => 3447003,\n    'GREEN' => 3066993,\n    'PURPLE' => 10181046,\n    'GOLD' => 15844367,\n    'ORANGE' => 15105570,\n    'RED' => 15158332,\n    'GREY' => 9807270,\n    'DARKER_GREY' => 8359053,\n    'NAVY' => 3426654,\n    'DARK_AQUA' => 1146986,\n    'DARK_GREEN' => 2067276,\n    'DARK_BLUE' => 2123412,\n    'DARK_GOLD' => 12745742,\n    'DARK_PURPLE' => 7419530,\n    'DARK_ORANGE' => 11027200,\n    'DARK_GREY' => 9936031,\n    'DARK_RED' => 10038562,\n    'LIGHT_GREY' => 12370112,\n    'DARK_NAVY' => 2899536\n);",""]}}},"CharlotteDunois\\Yasmin\\Models\\RoleStorage":{"name":"CharlotteDunois\\Yasmin\\Models\\RoleStorage","line":15,"short_desc":"Role Storage to store a guild's roles, utilizes Collection.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/RoleStorage.php","relative_file":"\/src\/Models\/RoleStorage.php","parent":"CharlotteDunois\\Yasmin\\Models\\Storage","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\RoleStorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\RoleStorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"delete":{"name":"delete","line":88,"short_desc":"Removes an item.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":88,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"get":{"name":"get","line":68,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":68,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":59,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":59,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"resolve":{"name":"resolve","line":38,"short_desc":"Resolves given data to a Role.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"role":{"name":"role","line":38,"short_desc":"string\/int = role ID","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"set":{"name":"set","line":78,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":78,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":78,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Role",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\Shard":{"name":"CharlotteDunois\\Yasmin\\Models\\Shard","line":17,"short_desc":"Represents a shard.","long_desc":"","hint":null,"tags":{"property":[[[["int",false]],"id","The shard ID."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/Shard.php","relative_file":"\/src\/Models\/Shard.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"Serializable":"Serializable"},"traits":[],"source":null,"properties":{"id":{"name":"id","line":17,"short_desc":"The shard ID.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":[],"constants":[]},"CharlotteDunois\\Yasmin\\Models\\Storage":{"name":"CharlotteDunois\\Yasmin\\Models\\Storage","line":15,"short_desc":"Base class for all storages.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/Storage.php","relative_file":"\/src\/Models\/Storage.php","parent":"CharlotteDunois\\Collect\\Collection","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface","Serializable":"Serializable"},"traits":[],"source":null,"properties":[],"methods":{"copy":{"name":"copy","line":163,"short_desc":"Returns a copy of itself. This does not make a copy of the stored data.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"delete":{"name":"delete","line":150,"short_desc":"Removes an item.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":150,"short_desc":null,"long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"filter":{"name":"filter","line":175,"short_desc":"Filters the storage by a given callback, keeping only those items that pass a given truth test. Returns a new Storage instance.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\StorageInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"closure":{"name":"closure","line":175,"short_desc":"","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false}}},"get":{"name":"get","line":122,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["mixed",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":122,"short_desc":null,"long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":108,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":108,"short_desc":null,"long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"set":{"name":"set","line":136,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":136,"short_desc":null,"long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":136,"short_desc":null,"long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"sort":{"name":"sort","line":188,"short_desc":"Sorts the collection. Returns a new Storage instance.","long_desc":"","hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"descending":{"name":"descending","line":188,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false},"options":{"name":"options","line":188,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"\\SORT_REGULAR","variadic":false,"is_by_ref":false}}},"sortCustom":{"name":"sortCustom","line":213,"short_desc":"Sorts the collection using a custom sorting function. Returns a new Storage instance.","long_desc":"","hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"closure":{"name":"closure","line":213,"short_desc":"Callback specification: `function ($a, $b): int`","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false}}},"sortCustomKey":{"name":"sortCustomKey","line":225,"short_desc":"Sorts the collection by key using a custom sorting function. Returns a new Storage instance.","long_desc":"","hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"closure":{"name":"closure","line":225,"short_desc":"Callback specification: `function ($a, $b): int`","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false}}},"sortKey":{"name":"sortKey","line":201,"short_desc":"Sorts the collection by key. Returns a new Storage instance.","long_desc":"","hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"descending":{"name":"descending","line":201,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false},"options":{"name":"options","line":201,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"\\SORT_REGULAR","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\TextChannel":{"name":"CharlotteDunois\\Yasmin\\Models\\TextChannel","line":31,"short_desc":"Represents a guild's text channel.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The channel ID."],[[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"guild","The associated guild."],[[["int",false]],"createdTimestamp","The timestamp of when this channel was created."],[[["string",false]],"name","The channel name."],[[["string",false]],"topic","The channel topic."],[[["bool",false]],"nsfw","Whether the channel is marked as NSFW or not."],[[["string",false],["null",false]],"parentID","The ID of the parent channel, or null."],[[["int",false]],"position","The channel position."],[[["int",false]],"slowmode","Ratelimit to send one message for each non-bot user, without `MANAGE_CHANNEL` and `MANAGE_MESSAGES` permissions, in seconds (0-120)."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"permissionOverwrites","A collection of PermissionOverwrite instances, mapped by their ID."],[[["string",false],["null",false]],"lastMessageID","The last message ID, or null."],[[["\\CharlotteDunois\\Yasmin\\Interfaces\\MessageStorageInterface",false]],"messages","The storage with all cached messages."],[[["\\DateTime",false]],"createdAt","The DateTime instance of createdTimestamp."],[[["\\CharlotteDunois\\Yasmin\\Models\\CategoryChannel",false],["null",false]],"parent","The channel's parent, or null."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/TextChannel.php","relative_file":"\/src\/Models\/TextChannel.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\GuildTextChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\GuildTextChannelInterface"},"traits":{"CharlotteDunois\\Yasmin\\Traits\\GuildChannelTrait":"CharlotteDunois\\Yasmin\\Traits\\GuildChannelTrait","CharlotteDunois\\Yasmin\\Traits\\TextChannelTrait":"CharlotteDunois\\Yasmin\\Traits\\TextChannelTrait"},"source":null,"properties":{"createdAt":{"name":"createdAt","line":31,"short_desc":"The DateTime instance of createdTimestamp.","long_desc":null,"hint":[["\\DateTime",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":31,"short_desc":"The timestamp of when this channel was created.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guild":{"name":"guild","line":31,"short_desc":"The associated guild.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":31,"short_desc":"The channel ID.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"lastMessageID":{"name":"lastMessageID","line":31,"short_desc":"The last message ID, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"messages":{"name":"messages","line":31,"short_desc":"The storage with all cached messages.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Interfaces\\MessageStorageInterface",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":31,"short_desc":"The channel name.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"nsfw":{"name":"nsfw","line":31,"short_desc":"Whether the channel is marked as NSFW or not.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"parent":{"name":"parent","line":31,"short_desc":"The channel's parent, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\CategoryChannel",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"parentID":{"name":"parentID","line":31,"short_desc":"The ID of the parent channel, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"permissionOverwrites":{"name":"permissionOverwrites","line":31,"short_desc":"A collection of PermissionOverwrite instances, mapped by their ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"position":{"name":"position","line":31,"short_desc":"The channel position.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"slowmode":{"name":"slowmode","line":31,"short_desc":"Ratelimit to send one message for each non-bot user, without `MANAGE_CHANNEL` and `MANAGE_MESSAGES` permissions, in seconds (0-120).","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"topic":{"name":"topic","line":31,"short_desc":"The channel topic.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__toString":{"name":"__toString","line":204,"short_desc":"Automatically converts to a mention.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"createWebhook":{"name":"createWebhook","line":151,"short_desc":"Create a webhook for the channel. Resolves with the new Webhook instance.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Webhook"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":151,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"avatar":{"name":"avatar","line":151,"short_desc":"An URL or file path, or data.","long_desc":null,"hint":[["string",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"string","attributes":{"startLine":151,"endLine":151}},"default":"null","variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":151,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"fetchWebhooks":{"name":"fetchWebhooks","line":175,"short_desc":"Fetches the channel's webhooks. Resolves with a Collection of Webhook instances, mapped by their ID.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Webhook"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"setSlowmode":{"name":"setSlowmode","line":196,"short_desc":"Sets the slowmode in seconds for this channel.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"slowmode":{"name":"slowmode","line":196,"short_desc":"0-21600","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":196,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\User":{"name":"CharlotteDunois\\Yasmin\\Models\\User","line":29,"short_desc":"Represents an user on Discord.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The user ID."],[[["string",false]],"username","The username."],[[["string",false]],"discriminator","The discriminator of this user."],[[["bool",false]],"bot","Is the user a bot? Or are you a bot?"],[[["string",false],["null",false]],"avatar","The hash of the user's avatar, or null."],[[["string",false]],"email","An email address or maybe nothing at all. More likely to be nothing at all."],[[["bool",false],["null",false]],"mfaEnabled","Whether the user has two factor enabled on their account, or null if no information provided."],[[["bool",false],["null",false]],"verified","Whether the email on this account has been verified, or null if no information provided."],[[["bool",false]],"webhook","Determines wether the user is a webhook or not."],[[["int",false]],"createdTimestamp","The timestamp of when this user was created."],[[["\\DateTime",false]],"createdAt","An DateTime instance of the createdTimestamp."],[[["string",false]],"tag","Username#Discriminator."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/User.php","relative_file":"\/src\/Models\/User.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"avatar":{"name":"avatar","line":29,"short_desc":"The hash of the user's avatar, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"bot":{"name":"bot","line":29,"short_desc":"Is the user a bot? Or are you a bot?","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdAt":{"name":"createdAt","line":29,"short_desc":"An DateTime instance of the createdTimestamp.","long_desc":null,"hint":[["\\DateTime",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":29,"short_desc":"The timestamp of when this user was created.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"discriminator":{"name":"discriminator","line":29,"short_desc":"The discriminator of this user.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"email":{"name":"email","line":29,"short_desc":"An email address or maybe nothing at all. More likely to be nothing at all.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":29,"short_desc":"The user ID.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"mfaEnabled":{"name":"mfaEnabled","line":29,"short_desc":"Whether the user has two factor enabled on their account, or null if no information provided.","long_desc":null,"hint":[["bool",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"tag":{"name":"tag","line":29,"short_desc":"Username#Discriminator.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"username":{"name":"username","line":29,"short_desc":"The username.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"verified":{"name":"verified","line":29,"short_desc":"Whether the email on this account has been verified, or null if no information provided.","long_desc":null,"hint":[["bool",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"webhook":{"name":"webhook","line":29,"short_desc":"Determines wether the user is a webhook or not.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__toString":{"name":"__toString","line":283,"short_desc":"Automatically converts the User instance to a mention.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"createDM":{"name":"createDM","line":148,"short_desc":"Opens a DM channel to this user. Resolves with an instance of DMChannel.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\DMChannel"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"deleteDM":{"name":"deleteDM","line":173,"short_desc":"Deletes an existing DM channel to this user. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"fetchUserConnections":{"name":"fetchUserConnections","line":265,"short_desc":"Fetches the User's connections. Requires connections scope. Resolves with a Collection of UserConnection instances, mapped by their ID.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\UserConnection"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"accessToken":{"name":"accessToken","line":265,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"getAvatarURL":{"name":"getAvatarURL","line":211,"short_desc":"Get the avatar URL.","long_desc":"","hint":[["string",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException","Thrown if $size is not a power of 2"]],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":211,"short_desc":"Any powers of 2 (16-2048).","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":211,"endLine":211}},"default":"1024","variadic":false,"is_by_ref":false},"format":{"name":"format","line":211,"short_desc":"One of png, webp, jpg or gif (empty = default format).","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"getDefaultAvatarURL":{"name":"getDefaultAvatarURL","line":196,"short_desc":"Get the default avatar URL.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException","Thrown if $size is not a power of 2"]],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":196,"short_desc":"Any powers of 2 (16-2048).","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":196,"endLine":196}},"default":"1024","variadic":false,"is_by_ref":false}}},"getDisplayAvatarURL":{"name":"getDisplayAvatarURL","line":234,"short_desc":"Get the URL of the displayed avatar.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException","Thrown if $size is not a power of 2"]],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":234,"short_desc":"Any powers of 2 (16-2048).","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":234,"endLine":234}},"default":"1024","variadic":false,"is_by_ref":false},"format":{"name":"format","line":234,"short_desc":"One of png, webp, jpg or gif (empty = default format).","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"getPresence":{"name":"getPresence","line":242,"short_desc":"Gets the presence for this user, or null.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Presence",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\UserConnection":{"name":"CharlotteDunois\\Yasmin\\Models\\UserConnection","line":21,"short_desc":"Represents an user connection.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The ID of the connection account."],[[["string",false]],"name","The username of the connection account."],[[["string",false]],"type","The type of the user connection (e.g. twitch, youtube)."],[[["bool",false]],"revoked","Whether the connection is revoked."],[[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"user","The user which this user connection belongs to."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/UserConnection.php","relative_file":"\/src\/Models\/UserConnection.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"id":{"name":"id","line":21,"short_desc":"The ID of the connection account.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":21,"short_desc":"The username of the connection account.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"revoked":{"name":"revoked","line":21,"short_desc":"Whether the connection is revoked.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"type":{"name":"type","line":21,"short_desc":"The type of the user connection (e.g. twitch, youtube).","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"user":{"name":"user","line":21,"short_desc":"The user which this user connection belongs to.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":[],"constants":[]},"CharlotteDunois\\Yasmin\\Models\\UserStorage":{"name":"CharlotteDunois\\Yasmin\\Models\\UserStorage","line":15,"short_desc":"User Storage to store and cache users, which utlizies Collection.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/UserStorage.php","relative_file":"\/src\/Models\/UserStorage.php","parent":"CharlotteDunois\\Yasmin\\Models\\Storage","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\UserStorageInterface":"CharlotteDunois\\Yasmin\\Interfaces\\UserStorageInterface"},"traits":[],"source":null,"properties":[],"methods":{"delete":{"name":"delete","line":117,"short_desc":"Removes an item.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":117,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"get":{"name":"get","line":93,"short_desc":"Returns the item at a given key. If the key does not exist, null is returned.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":93,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"has":{"name":"has","line":84,"short_desc":"Determines if a given key exists in the collection.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":84,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"patch":{"name":"patch","line":67,"short_desc":"Patches an user (retrieves the user if the user exists), returns null if only the ID is in the array, or creates an user.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":67,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"resolve":{"name":"resolve","line":42,"short_desc":"Resolves given data to an user.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":42,"short_desc":"string\/int = user ID","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"set":{"name":"set","line":103,"short_desc":"Sets a key-value pair.","long_desc":"","hint":[["$this",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"key":{"name":"key","line":103,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"value":{"name":"value","line":103,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"sweep":{"name":"sweep","line":150,"short_desc":"Sweeps users falling out of scope (no mutual guilds). Returns the amount of sweeped users.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\VoiceChannel":{"name":"CharlotteDunois\\Yasmin\\Models\\VoiceChannel","line":29,"short_desc":"Represents a guild's voice channel.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The ID of the channel."],[[["int",false]],"createdTimestamp","The timestamp of when this channel was created."],[[["string",false]],"name","The name of the channel."],[[["int",false]],"bitrate","The bitrate of the channel."],[[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"guild","The guild the channel is in."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"members","Holds all members which currently are in the voice channel. ({@see \\CharlotteDunois\\Yasmin\\Models\\GuildMember})"],[[["string",false],["null",false]],"parentID","The ID of the parent channel, or null."],[[["int",false]],"position","The position of the channel."],[[["\\CharlotteDunois\\Collect\\Collection",false]],"permissionOverwrites","A collection of PermissionOverwrite instances, mapped by their ID."],[[["int",false]],"userLimit","The maximum amount of users allowed in the channel - 0 means unlimited."],[[["bool",false]],"full","Checks if the voice channel is full."],[[["\\CharlotteDunois\\Yasmin\\Models\\CategoryChannel",false],["null",false]],"parent","Returns the channel's parent, or null."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/VoiceChannel.php","relative_file":"\/src\/Models\/VoiceChannel.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":{"CharlotteDunois\\Yasmin\\Interfaces\\GuildVoiceChannelInterface":"CharlotteDunois\\Yasmin\\Interfaces\\GuildVoiceChannelInterface"},"traits":{"CharlotteDunois\\Yasmin\\Traits\\GuildChannelTrait":"CharlotteDunois\\Yasmin\\Traits\\GuildChannelTrait"},"source":null,"properties":{"bitrate":{"name":"bitrate","line":29,"short_desc":"The bitrate of the channel.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"createdTimestamp":{"name":"createdTimestamp","line":29,"short_desc":"The timestamp of when this channel was created.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"full":{"name":"full","line":29,"short_desc":"Checks if the voice channel is full.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guild":{"name":"guild","line":29,"short_desc":"The guild the channel is in.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Guild",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":29,"short_desc":"The ID of the channel.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"members":{"name":"members","line":29,"short_desc":"Holds all members which currently are in the voice channel. ({@see \\CharlotteDunois\\Yasmin\\Models\\GuildMember})","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":29,"short_desc":"The name of the channel.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"parent":{"name":"parent","line":29,"short_desc":"Returns the channel's parent, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\CategoryChannel",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"parentID":{"name":"parentID","line":29,"short_desc":"The ID of the parent channel, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"permissionOverwrites":{"name":"permissionOverwrites","line":29,"short_desc":"A collection of PermissionOverwrite instances, mapped by their ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"position":{"name":"position","line":29,"short_desc":"The position of the channel.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"userLimit":{"name":"userLimit","line":29,"short_desc":"The maximum amount of users allowed in the channel - 0 means unlimited.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__toString":{"name":"__toString","line":165,"short_desc":"Automatically converts to the name.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"canSpeak":{"name":"canSpeak","line":135,"short_desc":"Whether the client user can speak in this channel.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"setBitrate":{"name":"setBitrate","line":146,"short_desc":"Sets the bitrate of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"bitrate":{"name":"bitrate","line":146,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":146,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setUserLimit":{"name":"setUserLimit","line":157,"short_desc":"Sets the user limit of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"userLimit":{"name":"userLimit","line":157,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":157,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Models\\VoiceRegion":{"name":"CharlotteDunois\\Yasmin\\Models\\VoiceRegion","line":22,"short_desc":"Represents a voice region.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The ID of the region."],[[["string",false]],"name","The name of the region."],[[["bool",false]],"vip","Whether this is a VIP voice region."],[[["bool",false]],"optimal","Whether this is an optimal voice region for the client user."],[[["bool",false]],"deprecated","Whether this voice region is deprecated and therefore should be avoided."],[[["bool",false]],"custom","Whether the region is custom."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/VoiceRegion.php","relative_file":"\/src\/Models\/VoiceRegion.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"custom":{"name":"custom","line":22,"short_desc":"Whether the region is custom.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"deprecated":{"name":"deprecated","line":22,"short_desc":"Whether this voice region is deprecated and therefore should be avoided.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":22,"short_desc":"The ID of the region.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":22,"short_desc":"The name of the region.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"optimal":{"name":"optimal","line":22,"short_desc":"Whether this is an optimal voice region for the client user.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"vip":{"name":"vip","line":22,"short_desc":"Whether this is a VIP voice region.","long_desc":null,"hint":[["bool",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":[],"constants":[]},"CharlotteDunois\\Yasmin\\Models\\Webhook":{"name":"CharlotteDunois\\Yasmin\\Models\\Webhook","line":23,"short_desc":"Represents a webhook.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The webhook ID."],[[["string",false],["null",false]],"name","The webhook default name, or null."],[[["string",false],["null",false]],"avatar","The webhook default avatar, or null."],[[["string",false],["null",false]],"channelID","The channel ID the webhook belongs to."],[[["string",false],["null",false]],"guildID","The guild ID the webhook belongs to, or null."],[[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"owner","The owner of the webhook, or null."],[[["string",false],["null",false]],"token","The webhook token, or null."]]},"namespace":"CharlotteDunois\\Yasmin\\Models","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Models\/Webhook.php","relative_file":"\/src\/Models\/Webhook.php","parent":"CharlotteDunois\\Yasmin\\Models\\ClientBase","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"avatar":{"name":"avatar","line":23,"short_desc":"The webhook default avatar, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"channelID":{"name":"channelID","line":23,"short_desc":"The channel ID the webhook belongs to.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guildID":{"name":"guildID","line":23,"short_desc":"The guild ID the webhook belongs to, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":23,"short_desc":"The webhook ID.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":23,"short_desc":"The webhook default name, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"owner":{"name":"owner","line":23,"short_desc":"The owner of the webhook, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"token":{"name":"token","line":23,"short_desc":"The webhook token, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"delete":{"name":"delete","line":146,"short_desc":"Deletes the webhook.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"reason":{"name":"reason","line":146,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"edit":{"name":"edit","line":108,"short_desc":"Edits the webhook. Resolves with $this.","long_desc":"Options are as following (at least one is required):\n\n```\narray(\n   'name' => string,\n   'avatar' => string, (data, filepath or URL)\n   'channel' => \\CharlotteDunois\\Yasmin\\Models\\TextChannel|string\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":108,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":108,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"send":{"name":"send","line":194,"short_desc":"Executes the webhooks and sends a message to the channel. Resolves with an instance of Message, or a Collection of Message instances, mapped by their ID. Or when using the WebhookClient, it will resolve with a raw Message object (array) or an array of raw Message objects (array).","long_desc":"Options are as following (all are optional):\n\n```\narray(\n   'embeds' => \\CharlotteDunois\\Yasmin\\Models\\MessageEmbed[]|array[], (an array of (embed) array\/object or MessageEmbed instances)\n   'files' => array, (an array of `[ 'name' => string, 'data' => string || 'path' => string ]` or just plain file contents, file paths or URLs)\n   'nonce' => string, (a snowflake used for optimistic sending)\n   'disableEveryone' => bool, (whether @everyone and @here should be replaced with plaintext, defaults to client option disableEveryone (which itself defaults to false))\n   'tts' => bool,\n   'split' => bool|array, (*)\n   'username' => string,\n   'avatar' => string, (an URL)\n)\n\n  * array(\n  *   'before' => string, (The string to insert before the split)\n  *   'after' => string, (The string to insert after the split)\n  *   'char' => string, (The string to split on)\n  *   'maxLength' => int, (The max. length of each message)\n  * )\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Message"],["https:\/\/discordapp.com\/developers\/docs\/resources\/channel#message-object"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""]],"errors":[],"example":null,"source":null,"parameters":{"content":{"name":"content","line":194,"short_desc":"The webhook message content.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":194,"short_desc":"Any webhook message options.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Traits\\GuildChannelTrait":{"name":"CharlotteDunois\\Yasmin\\Traits\\GuildChannelTrait","line":15,"short_desc":"The trait all guild channels use.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Traits","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Traits\/GuildChannelTrait.php","relative_file":"\/src\/Traits\/GuildChannelTrait.php","parent":null,"modifiers":null,"is_trait":true,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"clone":{"name":"clone","line":62,"short_desc":"Clones a guild channel. Resolves with an instance of GuildChannelInterface.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Interfaces\\GuildChannelInterface"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":62,"short_desc":"Optional name for the new channel, otherwise it has the name of this channel.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"null","variadic":false,"is_by_ref":false},"withPermissions":{"name":"withPermissions","line":62,"short_desc":"Whether to clone the channel with this channel's permission overwrites","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"true","variadic":false,"is_by_ref":false},"withTopic":{"name":"withTopic","line":62,"short_desc":"Whether to clone the channel with this channel's topic.","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"true","variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":62,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"createInvite":{"name":"createInvite","line":34,"short_desc":"Creates an invite. Resolves with an instance of Invite.","long_desc":"Options are as following (all are optional).\n\n```\narray(\n   'maxAge' => int,\n   'maxUses' => int, (0 = unlimited)\n   'temporary' => bool,\n   'unique' => bool\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Invite"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":34,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"delete":{"name":"delete","line":156,"short_desc":"Deletes the channel.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"reason":{"name":"reason","line":156,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"edit":{"name":"edit","line":119,"short_desc":"Edits the channel. Resolves with $this.","long_desc":"Options are as following (at least one is required).\n\n```\narray(\n   'name' => string,\n   'position' => int,\n   'topic' => string, (text channels only)\n   'nsfw' => bool, (text channels only)\n   'bitrate' => int, (voice channels only)\n   'userLimit' => int, (voice channels only)\n   'slowmode' => int, (text channels only, 0-21600)\n   'parent' => \\CharlotteDunois\\Yasmin\\Models\\CategoryChannel|string, (string = channel ID)\n   'permissionOverwrites' => \\CharlotteDunois\\Collect\\Collection|array (an array or Collection of PermissionOverwrite instances or permission overwrite arrays)\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":119,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":119,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"fetchInvites":{"name":"fetchInvites","line":169,"short_desc":"Fetches all invites of this channel. Resolves with a Collection of Invite instances, mapped by their code.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Invite"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isPermissionsLocked":{"name":"isPermissionsLocked","line":189,"short_desc":"Whether the permission overwrites match the parent channel (permissions synced).","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""]],"errors":[],"example":null,"source":null,"parameters":[]},"lockPermissions":{"name":"lockPermissions","line":332,"short_desc":"Locks in the permission overwrites from the parent channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\BadMethodCallException",""]],"errors":[],"example":null,"source":null,"parameters":{"reason":{"name":"reason","line":332,"short_desc":"The reason for this.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"overwritePermissions":{"name":"overwritePermissions","line":295,"short_desc":"Overwrites the permissions for a member or role in this channel. Resolves with an instance of PermissionOverwrite.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\PermissionOverwrite"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"memberOrRole":{"name":"memberOrRole","line":295,"short_desc":"The member or role.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["\\CharlotteDunois\\Yasmin\\Models\\Role",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"allow":{"name":"allow","line":295,"short_desc":"Which permissions should be allowed?","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"deny":{"name":"deny","line":295,"short_desc":"Which permissions should be denied?","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false],["int",false]],"tags":[],"modifiers":null,"default":"0","variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":295,"short_desc":"The reason for this.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"overwritesFor":{"name":"overwritesFor","line":261,"short_desc":"Returns the permissions overwrites for the given member as an associative array.","long_desc":"```\narray(\n    'everyone' => \\CharlotteDunois\\Yasmin\\Models\\PermissionOverwrite|null,\n    'member' => \\CharlotteDunois\\Yasmin\\Models\\PermissionOverwrite|null,\n    'roles' => \\CharlotteDunois\\Yasmin\\Models\\PermissionOverwrite[]\n)\n```","hint":[["array",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"member":{"name":"member","line":261,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"permissionsFor":{"name":"permissionsFor","line":213,"short_desc":"Returns the permissions for the given member.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Permissions",false]],"hint_desc":"","tags":{"see":[["https:\/\/discordapp.com\/developers\/docs\/topics\/permissions#permission-overwrites"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"member":{"name":"member","line":213,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\GuildMember",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"setNSFW":{"name":"setNSFW","line":384,"short_desc":"Sets the nsfw flag of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"nsfw":{"name":"nsfw","line":384,"short_desc":"","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":384,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setName":{"name":"setName","line":373,"short_desc":"Sets the name of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"name":{"name":"name","line":373,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":373,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setParent":{"name":"setParent","line":395,"short_desc":"Sets the parent of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"parent":{"name":"parent","line":395,"short_desc":"An instance of CategoryChannel or the channel ID.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\CategoryChannel",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":395,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setPermissionOverwrites":{"name":"setPermissionOverwrites","line":406,"short_desc":"Sets the permission overwrites of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"permissionOverwrites":{"name":"permissionOverwrites","line":406,"short_desc":"An array or Collection of PermissionOverwrite instances or permission overwrite arrays.","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false],["array",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":406,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setPosition":{"name":"setPosition","line":417,"short_desc":"Sets the position of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"position":{"name":"position","line":417,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":417,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}},"setTopic":{"name":"setTopic","line":464,"short_desc":"Sets the topic of the channel. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"topic":{"name":"topic","line":464,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":464,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Traits\\TextChannelTrait":{"name":"CharlotteDunois\\Yasmin\\Traits\\TextChannelTrait","line":15,"short_desc":"The text based channel trait.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Traits","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Traits\/TextChannelTrait.php","relative_file":"\/src\/Traits\/TextChannelTrait.php","parent":null,"modifiers":null,"is_trait":true,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"bulkDelete":{"name":"bulkDelete","line":68,"short_desc":"Deletes multiple messages at once. Resolves with $this.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"messages":{"name":"messages","line":68,"short_desc":"A collection or array of Message instances, or the number of messages to delete (2-100).","long_desc":null,"hint":[["\\CharlotteDunois\\Collect\\Collection",false],["array",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"reason":{"name":"reason","line":68,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":"''","variadic":false,"is_by_ref":false},"filterOldMessages":{"name":"filterOldMessages","line":68,"short_desc":"Automatically filters out too old messages (14 days).","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false}}},"collectMessages":{"name":"collectMessages","line":129,"short_desc":"Collects messages during a specific duration (and max. amount). Resolves with a Collection of Message instances, mapped by their IDs.","long_desc":"Options are as following (all are optional):\n\n```\narray(\n  'max' => int, (max. messages to collect)\n  'time' => int, (duration, in seconds, default 30)\n  'errors' => array, (optional, which failed \"conditions\" (max not reached in time (\"time\")) lead to a rejected promise, defaults to [])\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"This promise is cancellable.","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Message"],["\\CharlotteDunois\\Yasmin\\Utils\\Collector"]]},"modifiers":1,"is_by_ref":"","exceptions":[["\\RangeException","The exception the promise gets rejected with, if collecting times out."],["\\OutOfBoundsException","The exception the promise gets rejected with, if the promise gets cancelled."]],"errors":[],"example":null,"source":null,"parameters":{"filter":{"name":"filter","line":129,"short_desc":"The filter to only collect desired messages. Signature: `function (Message $message): bool`","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":129,"short_desc":"The collector options.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"fetchMessage":{"name":"fetchMessage","line":147,"short_desc":"Fetches a specific message using the ID. Resolves with an instance of Message.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Message"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"id":{"name":"id","line":147,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"fetchMessages":{"name":"fetchMessages","line":174,"short_desc":"Fetches messages of this channel. Resolves with a Collection of Message instances, mapped by their ID.","long_desc":"Options are as following:\n\n```\narray(\n  'after' => string, (message ID)\n  'around' => string, (message ID)\n  'before' => string, (message ID)\n  'limit' => int, (1-100, defaults to 50)\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Message"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":174,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"getLastMessage":{"name":"getLastMessage","line":193,"short_desc":"Gets the last message in this channel if cached, or null.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false],["null",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"isTyping":{"name":"isTyping","line":366,"short_desc":"Determines whether the given user is typing in this channel or not.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":366,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","User"],"attributes":{"startLine":366,"endLine":366}},"default":null,"variadic":false,"is_by_ref":false}}},"isTypingSince":{"name":"isTypingSince","line":375,"short_desc":"Determines whether how long the given user has been typing in this channel. Returns -1 if the user is not typing.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"user":{"name":"user","line":375,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","User"],"attributes":{"startLine":375,"endLine":375}},"default":null,"variadic":false,"is_by_ref":false}}},"send":{"name":"send","line":229,"short_desc":"Sends a message to a channel. Resolves with an instance of Message, or a Collection of Message instances, mapped by their ID.","long_desc":"Options are as following (all are optional):\n\n```\narray(\n   'embed' => array|\\CharlotteDunois\\Yasmin\\Models\\MessageEmbed, (an (embed) array\/object or an instance of MessageEmbed)\n   'files' => array, (an array of `[ 'name' => string, 'data' => string || 'path' => string ]` or just plain file contents, file paths or URLs)\n   'nonce' => string, (a snowflake used for optimistic sending)\n   'disableEveryone' => bool, (whether @everyone and @here should be replaced with plaintext, defaults to client option disableEveryone)\n   'tts' => bool,\n   'split' => bool|array, (*)\n)\n\n  * array(\n  *   'before' => string, (The string to insert before the split)\n  *   'after' => string, (The string to insert after the split)\n  *   'char' => string, (The string to split on)\n  *   'maxLength' => int, (The max. length of each message)\n  * )\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Message"]]},"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"content":{"name":"content","line":229,"short_desc":"The message content.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":229,"short_desc":"Any message options.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"startTyping":{"name":"startTyping","line":307,"short_desc":"Starts sending the typing indicator in this channel. Counts up a triggered typing counter.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"stopTyping":{"name":"stopTyping","line":335,"short_desc":"Stops sending the typing indicator in this channel. Counts down a triggered typing counter.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"force":{"name":"force","line":335,"short_desc":"Reset typing counter and stop sending the indicator.","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false}}},"typingCount":{"name":"typingCount","line":357,"short_desc":"Returns the amount of user typing in this channel.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Utils\\Collector":{"name":"CharlotteDunois\\Yasmin\\Utils\\Collector","line":15,"short_desc":"A collector is an util to collect elements from events.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Utils","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Utils\/Collector.php","relative_file":"\/src\/Utils\/Collector.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"__construct":{"name":"__construct","line":89,"short_desc":"The handler gets invoked as `$handler(.","long_desc":"..$item)`. The optional filter get applied to look for a specific event (invoked as `$filter(...$item)`).\n\nOptions may be:\n```\narray(\n    'max' => int, (maximum amount of elements to collect)\n    'time' => int, (maximum amount of time (in seconds) to spend collecting (0 = unlimited), defaults to 30 seconds)\n    'errors' => string[], (which unmet conditions lead to a promise rejection)\n)\n```","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"emitter":{"name":"emitter","line":89,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Events\\EventEmitterInterface",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"event":{"name":"event","line":89,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"handler":{"name":"handler","line":89,"short_desc":"How the collect item should be handled. Must return an array of `[ $key, $value ]`.","long_desc":null,"hint":[["callable",false]],"tags":[],"modifiers":"callable","default":null,"variadic":false,"is_by_ref":false},"filter":{"name":"filter","line":89,"short_desc":"","long_desc":null,"hint":[["callable",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"callable","attributes":{"startLine":89,"endLine":89}},"default":"null","variadic":false,"is_by_ref":false},"options":{"name":"options","line":89,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}},"collect":{"name":"collect","line":114,"short_desc":"Starts collecting. Resolves with a collection.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"This promise is cancellable.","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\RangeException","The exception the promise gets rejected with, if collecting times out."],["\\OutOfBoundsException","The exception the promise gets rejected with, if the promise gets cancelled."]],"errors":[],"example":null,"source":null,"parameters":[]},"stop":{"name":"stop","line":155,"short_desc":"This will stop the collector.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]}},"constants":[]},"CharlotteDunois\\Yasmin\\Utils\\DataHelpers":{"name":"CharlotteDunois\\Yasmin\\Utils\\DataHelpers","line":15,"short_desc":"Data Helper methods.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Utils","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Utils\/DataHelpers.php","relative_file":"\/src\/Utils\/DataHelpers.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"applyOptions":{"name":"applyOptions","line":112,"short_desc":"Converts the input to the specified options.","long_desc":"Options is\n```\narray(\n    key => null|newKey|array('key' => newKey, 'type' => string, 'parse' => callable)\n)\n```","hint":[["array",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"input":{"name":"input","line":112,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":112,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"makeBase64URI":{"name":"makeBase64URI","line":54,"short_desc":"Turns input into a base64-encoded data URI.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"data":{"name":"data","line":54,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"makeDateTime":{"name":"makeDateTime","line":43,"short_desc":"Makes a DateTime instance from an UNIX timestamp and applies the default timezone.","long_desc":"","hint":[["\\DateTime",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"timestamp":{"name":"timestamp","line":43,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false}}},"resolveColor":{"name":"resolveColor","line":22,"short_desc":"Resolves a color to an integer.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"color":{"name":"color","line":22,"short_desc":"","long_desc":null,"hint":[["array",false],["int",false],["string",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"typecastVariable":{"name":"typecastVariable","line":70,"short_desc":"Typecasts the variable to the type, if not null.","long_desc":"","hint":[["mixed",false],["null",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"variable":{"name":"variable","line":70,"short_desc":"&$variable","long_desc":null,"hint":[["mixed",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"type":{"name":"type","line":70,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Utils\\EventHelpers":{"name":"CharlotteDunois\\Yasmin\\Utils\\EventHelpers","line":15,"short_desc":"Event Helper methods.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Utils","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Utils\/EventHelpers.php","relative_file":"\/src\/Utils\/EventHelpers.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"waitForEvent":{"name":"waitForEvent","line":34,"short_desc":"Waits for a specific type of event to get emitted. Additional filter may be applied to look for a specific event (invoked as `$filter(.","long_desc":"..$args)`). Resolves with an array of arguments (from the event).\n\nOptions may be:\n```\narray(\n    'time' => int, (if the event hasn't been found yet, this will define a timeout (in seconds) after which the promise gets rejected)\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"This promise is cancellable.","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\RangeException","The exception the promise gets rejected with, if waiting times out."],["\\OutOfBoundsException","The exception the promise gets rejected with, if the promise gets cancelled."]],"errors":[],"example":null,"source":null,"parameters":{"emitter":{"name":"emitter","line":34,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Events\\EventEmitterInterface",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false},"event":{"name":"event","line":34,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"filter":{"name":"filter","line":34,"short_desc":"","long_desc":null,"hint":[["callable",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"callable","attributes":{"startLine":34,"endLine":34}},"default":"null","variadic":false,"is_by_ref":false},"options":{"name":"options","line":34,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Utils\\FileHelpers":{"name":"CharlotteDunois\\Yasmin\\Utils\\FileHelpers","line":15,"short_desc":"File Helper methods.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Utils","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Utils\/FileHelpers.php","relative_file":"\/src\/Utils\/FileHelpers.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"getFilesystem":{"name":"getFilesystem","line":47,"short_desc":"Returns the stored React Filesystem instance, or null.","long_desc":"","hint":[["\\React\\Filesystem\\FilesystemInterface",false],["false",false],["null",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"resolveFileResolvable":{"name":"resolveFileResolvable","line":69,"short_desc":"Resolves filepath and URL into file data - returns it if it's neither. Resolves with a string.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"file":{"name":"file","line":69,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"setFilesystem":{"name":"setFilesystem","line":56,"short_desc":"Sets the React Filesystem instance, or disables it.","long_desc":"","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"filesystem":{"name":"filesystem","line":56,"short_desc":"","long_desc":null,"hint":[["\\React\\Filesystem\\FilesystemInterface",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["React","Filesystem","FilesystemInterface"],"attributes":{"startLine":56,"endLine":56}},"attributes":{"startLine":56,"endLine":56}},"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Utils\\ImageHelpers":{"name":"CharlotteDunois\\Yasmin\\Utils\\ImageHelpers","line":15,"short_desc":"Image Helper utilities.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Utils","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Utils\/ImageHelpers.php","relative_file":"\/src\/Utils\/ImageHelpers.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"getImageExtension":{"name":"getImageExtension","line":21,"short_desc":"Returns the default extension for an image.","long_desc":"","hint":[["string",false]],"hint_desc":"Returns \"gif\" if the hash begins with \"a_\", otherwise \"png\".","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"image":{"name":"image","line":21,"short_desc":"The image hash.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"isPowerOfTwo":{"name":"isPowerOfTwo","line":30,"short_desc":"Returns whether the input number is a power of 2.","long_desc":"","hint":[["bool",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"size":{"name":"size","line":30,"short_desc":"","long_desc":null,"hint":[["int",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"int","attributes":{"startLine":30,"endLine":30}},"default":null,"variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Utils\\MessageHelpers":{"name":"CharlotteDunois\\Yasmin\\Utils\\MessageHelpers","line":15,"short_desc":"Message Helper methods.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Utils","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Utils\/MessageHelpers.php","relative_file":"\/src\/Utils\/MessageHelpers.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"cleanContent":{"name":"cleanContent","line":22,"short_desc":"Cleans the text from mentions, by providing a context message.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"message":{"name":"message","line":22,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\Message",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Models","Message"],"attributes":{"startLine":22,"endLine":22}},"default":null,"variadic":false,"is_by_ref":false},"text":{"name":"text","line":22,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"escapeMarkdown":{"name":"escapeMarkdown","line":49,"short_desc":"Escapes any Discord-flavour markdown in a string.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"text":{"name":"text","line":49,"short_desc":"Content to escape.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"onlyCodeBlock":{"name":"onlyCodeBlock","line":49,"short_desc":"Whether to only escape codeblocks (takes priority).","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false},"onlyInlineCode":{"name":"onlyInlineCode","line":49,"short_desc":"Whether to only escape inline code.","long_desc":null,"hint":[["bool",false]],"tags":[],"modifiers":"bool","default":"false","variadic":false,"is_by_ref":false}}},"parseMentions":{"name":"parseMentions","line":70,"short_desc":"Parses mentions in a text. Resolves with an array of `[ 'type' => string, 'ref' => Models ]` arrays, in the order they were parsed.","long_desc":"For mentions not available to this method or the client (e.g. mentioning a channel with no access to), `ref` will be the parsed mention (string).\nIncludes everyone and here mentions.","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":70,"short_desc":"","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Client",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["CharlotteDunois","Yasmin","Client"],"attributes":{"startLine":70,"endLine":70}},"attributes":{"startLine":70,"endLine":70}},"default":null,"variadic":false,"is_by_ref":false},"content":{"name":"content","line":70,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false}}},"resolveMessageOptionsFiles":{"name":"resolveMessageOptionsFiles","line":156,"short_desc":"Resolves files of Message Options.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"options":{"name":"options","line":156,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"splitMessage":{"name":"splitMessage","line":240,"short_desc":"Splits a string into multiple chunks at a designated character that do not exceed a specific length.","long_desc":"Options will be merged into default split options (see Message), so missing elements will get added.\n```\narray(\n    'before' => string, (the string to add before the chunk)\n    'after' => string, (the string to add after the chunk)\n    'char' => string, (the string to split on)\n    'maxLength' => int (the max. length of each chunk)\n)\n```","hint":[["string",true]],"hint_desc":"","tags":{"see":[["\\CharlotteDunois\\Yasmin\\Models\\Message"]]},"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"text":{"name":"text","line":240,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":240,"short_desc":"Options controlling the behaviour of the split.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false}}}},"constants":[]},"CharlotteDunois\\Yasmin\\Utils\\Snowflake":{"name":"CharlotteDunois\\Yasmin\\Utils\\Snowflake","line":22,"short_desc":"Represents a Snowflake.","long_desc":"","hint":null,"tags":{"property":[[[["float",false]],"timestamp","The timestamp of when this snowflake got generated. In seconds with microseconds."],[[["int",false]],"workerID","The ID of the worker which generated this snowflake."],[[["int",false]],"processID","The ID of the process which generated this snowflake."],[[["int",false]],"increment","The increment index of the snowflake."],[[["string",false]],"binary","The binary representation of this snowflake."],[[["string",false],["int",false]],"value","The snowflake value."],[[["\\DateTime",false]],"date","A DateTime instance of the timestamp."]]},"namespace":"CharlotteDunois\\Yasmin\\Utils","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Utils\/Snowflake.php","relative_file":"\/src\/Utils\/Snowflake.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"binary":{"name":"binary","line":22,"short_desc":"The binary representation of this snowflake.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"date":{"name":"date","line":22,"short_desc":"A DateTime instance of the timestamp.","long_desc":null,"hint":[["\\DateTime",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"increment":{"name":"increment","line":22,"short_desc":"The increment index of the snowflake.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"processID":{"name":"processID","line":22,"short_desc":"The ID of the process which generated this snowflake.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"timestamp":{"name":"timestamp","line":22,"short_desc":"The timestamp of when this snowflake got generated. In seconds with microseconds.","long_desc":null,"hint":[["float",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"value":{"name":"value","line":22,"short_desc":"The snowflake value.","long_desc":null,"hint":[["string",false],["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"workerID":{"name":"workerID","line":22,"short_desc":"The ID of the worker which generated this snowflake.","long_desc":null,"hint":[["int",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__construct":{"name":"__construct","line":44,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[["\\InvalidArgumentException",""]],"errors":[],"example":null,"source":null,"parameters":{"snowflake":{"name":"snowflake","line":44,"short_desc":"","long_desc":null,"hint":[["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"deconstruct":{"name":"deconstruct","line":101,"short_desc":"Deconstruct a snowflake.","long_desc":"","hint":[["\\CharlotteDunois\\Yasmin\\Utils\\Snowflake",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"snowflake":{"name":"snowflake","line":101,"short_desc":"","long_desc":null,"hint":[["string",false],["int",false]],"tags":[],"modifiers":null,"default":null,"variadic":false,"is_by_ref":false}}},"generate":{"name":"generate","line":111,"short_desc":"Generates a new snowflake.","long_desc":"","hint":[["string",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"workerID":{"name":"workerID","line":111,"short_desc":"Valid values are in the range of 0-31.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"1","variadic":false,"is_by_ref":false},"processID":{"name":"processID","line":111,"short_desc":"Valid values are in the range of 0-31.","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":"0","variadic":false,"is_by_ref":false}}},"getShardID":{"name":"getShardID","line":160,"short_desc":"Compute the shard ID from the snowflake.","long_desc":"","hint":[["int",false]],"hint_desc":"","tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"shardCount":{"name":"shardCount","line":160,"short_desc":"","long_desc":null,"hint":[["int",false]],"tags":[],"modifiers":"int","default":null,"variadic":false,"is_by_ref":false}}}},"constants":{"EPOCH":{"name":"EPOCH","line":27,"short_desc":"Time since UNIX epoch to Discord epoch.","long_desc":"","source":null}}},"CharlotteDunois\\Yasmin\\Utils\\URLHelpers":{"name":"CharlotteDunois\\Yasmin\\Utils\\URLHelpers","line":15,"short_desc":"URL Helper methods.","long_desc":"","hint":null,"tags":[],"namespace":"CharlotteDunois\\Yasmin\\Utils","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/Utils\/URLHelpers.php","relative_file":"\/src\/Utils\/URLHelpers.php","parent":null,"modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":[],"methods":{"applyRequestOptions":{"name":"applyRequestOptions","line":179,"short_desc":"Applies request options to the request.","long_desc":"The following request options are supported:\n```\narray(\n    'multipart' => array, (multipart form data, an array of `[ 'name' => string, 'contents' => string|resource, 'filename' => string ]`)\n    'json' => mixed, (any JSON serializable type to send with the request as body payload)\n    'query' => string, (the URL query string to set to)\n    'headers' => string[], (HTTP headers to set)\n)\n```","hint":[["\\Psr\\Http\\Message\\RequestInterface",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\RuntimeException",""]],"errors":[],"example":null,"source":null,"parameters":{"request":{"name":"request","line":179,"short_desc":"","long_desc":null,"hint":[["\\Psr\\Http\\Message\\RequestInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Psr","Http","Message","RequestInterface"],"attributes":{"startLine":179,"endLine":179}},"default":null,"variadic":false,"is_by_ref":false},"requestOptions":{"name":"requestOptions","line":179,"short_desc":"","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":null,"variadic":false,"is_by_ref":false}}},"getHTTPClient":{"name":"getHTTPClient","line":78,"short_desc":"Returns the client. This method may be changed at any time.","long_desc":"","hint":[["\\Clue\\React\\Buzz\\Browser",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":[]},"makeRequest":{"name":"makeRequest","line":106,"short_desc":"Makes an asynchronous request. Resolves with an instance of ResponseInterface.","long_desc":"The following request options are supported:\n```\narray(\n    'http_errors' => bool, (whether the HTTP client should obey the HTTP success code)\n    'multipart' => array, (multipart form data, an array of `[ 'name' => string, 'contents' => string|resource, 'filename' => string ]`)\n    'json' => mixed, (any JSON serializable type to send with the request as body payload)\n    'query' => string, (the URL query string to set to)\n    'headers' => string[], (HTTP headers to set)\n    'timeout' => float, (after how many seconds the request times out)\n)\n```","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":{"see":[["\\Psr\\Http\\Message\\ResponseInterface"]]},"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"request":{"name":"request","line":106,"short_desc":"","long_desc":null,"hint":[["\\Psr\\Http\\Message\\RequestInterface",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Psr","Http","Message","RequestInterface"],"attributes":{"startLine":106,"endLine":106}},"default":null,"variadic":false,"is_by_ref":false},"requestOptions":{"name":"requestOptions","line":106,"short_desc":"","long_desc":null,"hint":[["array",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"array","attributes":{"startLine":106,"endLine":106}},"default":"null","variadic":false,"is_by_ref":false}}},"resolveURLToData":{"name":"resolveURLToData","line":138,"short_desc":"Asynchronously resolves a given URL to the response body. Resolves with a string.","long_desc":"","hint":[["\\React\\Promise\\ExtendedPromiseInterface",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"url":{"name":"url","line":138,"short_desc":"","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"requestHeaders":{"name":"requestHeaders","line":138,"short_desc":"","long_desc":null,"hint":[["array",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":"array","attributes":{"startLine":138,"endLine":138}},"default":"null","variadic":false,"is_by_ref":false}}},"setHTTPClient":{"name":"setHTTPClient","line":58,"short_desc":"Set the HTTP client used in Yasmin (and in this utility).","long_desc":"Be aware that this method can be changed at any time.\n\nIf you want to set the HTTP client, then you need to set it\nbefore the utilities get initialized by the Client!\n\nThe HTTP client is after setting **immutable**.","hint":[["void",false]],"hint_desc":"","tags":[],"modifiers":9,"is_by_ref":"","exceptions":[["\\LogicException",""]],"errors":[],"example":null,"source":null,"parameters":{"client":{"name":"client","line":58,"short_desc":null,"long_desc":null,"hint":[["\\Clue\\React\\Buzz\\Browser",false]],"tags":[],"modifiers":{"nodeType":"Name_FullyQualified","parts":["Clue","React","Buzz","Browser"],"attributes":{"startLine":58,"endLine":58}},"default":null,"variadic":false,"is_by_ref":false}}}},"constants":{"DEFAULT_USER_AGENT":{"name":"DEFAULT_USER_AGENT","line":21,"short_desc":"The default HTTP user agent.","long_desc":"","source":null}}},"CharlotteDunois\\Yasmin\\WebhookClient":{"name":"CharlotteDunois\\Yasmin\\WebhookClient","line":23,"short_desc":"The webhook client.","long_desc":"","hint":null,"tags":{"property":[[[["string",false]],"id","The webhook ID."],[[["string",false],["null",false]],"name","The webhook default name, or null."],[[["string",false],["null",false]],"avatar","The webhook default avatar, or null."],[[["string",false],["null",false]],"channelID","The channel the webhook belongs to."],[[["string",false],["null",false]],"guildID","The guild the webhook belongs to, or null."],[[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"owner","The owner of the webhook, or null."],[[["string",false]],"token","The webhook token."]]},"namespace":"CharlotteDunois\\Yasmin","file":"\/volume3\/web\/github\/repos\/CharlotteDunois-Yasmin\/master\/src\/WebhookClient.php","relative_file":"\/src\/WebhookClient.php","parent":"CharlotteDunois\\Yasmin\\Models\\Webhook","modifiers":0,"is_trait":false,"is_interface":false,"aliases":[],"errors":[],"interfaces":[],"traits":[],"source":null,"properties":{"avatar":{"name":"avatar","line":23,"short_desc":"The webhook default avatar, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"channelID":{"name":"channelID","line":23,"short_desc":"The channel the webhook belongs to.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"guildID":{"name":"guildID","line":23,"short_desc":"The guild the webhook belongs to, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"id":{"name":"id","line":23,"short_desc":"The webhook ID.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"name":{"name":"name","line":23,"short_desc":"The webhook default name, or null.","long_desc":null,"hint":[["string",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"owner":{"name":"owner","line":23,"short_desc":"The owner of the webhook, or null.","long_desc":null,"hint":[["\\CharlotteDunois\\Yasmin\\Models\\User",false],["null",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null},"token":{"name":"token","line":23,"short_desc":"The webhook token.","long_desc":null,"hint":[["string",false]],"hint_desc":null,"tags":[],"modifiers":null,"default":null,"errors":[],"source":null}},"methods":{"__construct":{"name":"__construct","line":31,"short_desc":"Constructor.","long_desc":"","hint":null,"hint_desc":null,"tags":[],"modifiers":1,"is_by_ref":"","exceptions":[],"errors":[],"example":null,"source":null,"parameters":{"id":{"name":"id","line":31,"short_desc":"The webhook ID.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"token":{"name":"token","line":31,"short_desc":"The webhook token.","long_desc":null,"hint":[["string",false]],"tags":[],"modifiers":"string","default":null,"variadic":false,"is_by_ref":false},"options":{"name":"options","line":31,"short_desc":"Any Client Options.","long_desc":null,"hint":[["array",false]],"tags":[],"modifiers":"array","default":"array()","variadic":false,"is_by_ref":false},"loop":{"name":"loop","line":31,"short_desc":"The ReactPHP Event Loop.","long_desc":null,"hint":[["\\React\\EventLoop\\LoopInterface",false],["null",false]],"tags":[],"modifiers":{"nodeType":"NullableType","type":{"nodeType":"Name_FullyQualified","parts":["React","EventLoop","LoopInterface"],"attributes":{"startLine":31,"endLine":31}},"attributes":{"startLine":31,"endLine":31}},"default":"null","variadic":false,"is_by_ref":false}}}},"constants":[]}}